local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.core")local c=require("am.log")local d=require("am.peripheral")local e=require("am.event")local f={}local g={}g.mods={name="colonies.blacklistedMods",default={["minecraft"]=true,["domum_ornamentum"]=true,["minecolonies"]=true},type="table"}g.maxStacks={name="colonies.maxStacks",default=4,type="number"}g.importChest={name="colonies.importChest",default="",type="string"}f.s=b.makeSettingWrapper(g)local h=nil;local i=nil;local j={}local k={}local l=300;local function m()if h==nil then h=peripheral.find("colonyIntegrator")if h==nil then error("Could not find Colony Integrator")end end;return h end;local function n()if i==nil then i=peripheral.find("meBridge")if i==nil then error("Could not find ME Bridge")end end;return i end;local function o()local p=f.s.importChest.get()if p~=""then return peripheral.wrap(p)end;return nil end;local function q(r)a.expect(1,r,"table")local s=nil;local t=r.list()for u=1,r.size(),1 do if t[u]==nil then s=u;break end end;return s end;local function v()if colony==nil or not colony.isValid()then error("Could not find colony info")end;local w=m()local x=colony.getInfo()if not x.active then error("Colony is not active")end;x.graves=w.amountOfGraves()x.constructionCount=w.amountOfConstructionSites()x.players=colony.getPlayers().players;x.requests=colony.getRequests()local y=colony.getBuildings()x.buildings={}x.tavernCount=0;for z,A in ipairs(y)do if A.type=="tavern"and A.level>0 then x.tavernCount=x.tavernCount+1 end;if A.type~="postbox"and A.type~="stash"then x.buildings[#x.buildings+1]=A end end;local B=colony.getVisitors()x.visitorCount=#B;x.visitors={}for z,C in ipairs(B)do x.visitors[C.id]=C end;local D=colony.getCitizens()x.citizenCount=#D;x.citizens={}for z,E in ipairs(D)do x.citizens[E.id]=E end;return x end;local function F()c.info("Scanning Warehouse...")local G=d.getInventoryNames()local t={}local H=0;local I=0;for z,J in ipairs(G)do if J:sub(1,18)=="minecolonies:rack_"then c.debug(string.format(".Scanning %s...",J))local K=peripheral.wrap(J)I=I+K.size()for L,M in pairs(K.list())do H=H+1;local N=M.name;if M.nbt~=nil then N=N..":"..M.nbt end;if t[N]==nil then M=K.getItemDetail(L)if M~=nil then M.inventories={[J]={L}}t[N]=M end else local O=t[N]O.count=O.count+M.count;local P=O.inventories[J]if P==nil then P={L}else P[#P+1]=L end;O.inventories[J]=P;t[N]=O end end end end;return t,H,I end;local function Q(M,R)a.expect(1,M,"table")a.expect(2,R,"number","nil")if R==nil then R=M.count end;c.info(string.format(".Empty %s %s",M.name,R))local r=o()if r==nil then error("Could not find dump chest")return end;local S=0;for J,T in pairs(M.inventories)do local U=peripheral.wrap(J)for z,L in ipairs(T)do local V=nil;while V==nil do V=q(r)if V==nil then c.info("Waiting for dump chest to empty...")sleep(5)end end;local W=U.getItemDetail(L)if W~=nil and W.name==M.name then local X=W.count;if X>R then X=R end;S=S+X;c.debug(string.format("%s %s %s %s %s",peripheral.getName(r),J,L,X,V))r.pullItems(J,L,X,V)if S>=R then break end end end end end;local function Y(t)c.debug("Emptying Items...")local Z=false;for z,M in pairs(t)do local _=b.split(M.name,":")if not f.s.mods.get()[_[1]]then Q(M)else local a0=M.count/M.maxCount;local a1=a0-f.s.maxStacks.get()if a1>0 then Z=true;Q(M,a1*M.maxCount)end end end;return Z end;local function a2()if colony==nil or not colony.isValid()then error("Could not find colony info")end;local Z=true;local t,H,I;while Z do t,H,I=F()Z=Y(t)if Z then c.info(".Rescanning warehouse")end end;local a3={}for z,M in pairs(t)do a3[#a3+1]=M end;e.ColonyWarehousePollEvent(colony.getInfo().id,a3,H,I):send()end;local function a4()local G=d.getInventoryNames()for z,J in ipairs(G)do if J:sub(1,18)=="minecolonies:rack_"then local K=peripheral.wrap(J)local t=K.list()if#t<K.size()then return J end end end;return nil end;local function a5(M,R)local a6=n()local a7=a6.getItem({name=M.name})if a7==nil then return 0 end;if R>a7.amount then R=a7.amount end;local a8=a4()if a8==nil then return 0 end;local a9=false;a9,R=pcall(function()return a6.exportItemToPeripheral({name=M.name,count=R},a8)end)if a9 then return R end;return 0 end;local function aa(ab)local ac=ab.name..ab.desc;if ab.target~=nil then ac=ac..ab.target end;if ab.count~=nil then ac=ac..tostring(ab.count)end;return ac end;local function ad()local ae=os.clock()local af={}for ag,ac in pairs(k)do if ag+l>ae then af[ag]=ac else j[ac]=nil end end;k=af end;local function ah()local ai={}local aj=colony.getRequests()for z,ab in ipairs(aj)do if not ai[ab.name]then local ac=aa(ab)if not j[ac]then local R=0;for z,M in ipairs(ab.items)do R=a5(M,ab.count)if R>0 then break end end;c.debug(string.format(".Fulfil %s..%s",ab.name,R))if R==0 then ai[ab.name]=true else k[os.clock()]=ac;j[ac]=true end end end end;ad()end;local function ak()return o()~=nil end;f.pollColony=v;f.scanItems=F;f.emptyWarehouse=a2;f.canResume=ak;f.fulfillRequests=ah;return f
