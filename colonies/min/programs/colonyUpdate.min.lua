require(settings.get("ghu.base").."core/apis/ghu")local a=require("am.log")local b=require("am.colonies")local c=require("am.progress")local d=require("am.event")local e=require("am.core")_G.RUN_PROGRESS=true;_G.PROGRESS_SHOW_CLOSE=true;local f=true;local g=""local h=nil;local function i(j)g=j;if h~=nil then d.ColonyStatusPollEvent(h,g):send()end end;local function k()while _G.RUN_PROGRESS do a.info("Polling colony status...")i("Poll Colony")h=b.pollColony()d.ColonyStatusPollEvent(h,g):send()a.info("Completed polling colony status")i("")local l=30;local m=10;while l>0 and _G.RUN_PROGRESS do l=l-0.5;m=m-0.5;if m<=0 then d.PingEvent():send()m=10 end;sleep(0.5)end end;i("error:Stopped")sleep(2)f=false end;local function n()while _G.RUN_PROGRESS do sleep(7)i("Scan Warehouse")a.info("Emptying warehouse inventory...")b.emptyWarehouse()a.info("Completed empty warehouse")i("")sleep(53)end end;local function o()while f do local p=os.startTimer(3)local q,r=e.cleanEventArgs(os.pullEvent())if q==d.c.Event.Colonies.status_poll or q==d.c.Event.Colonies.warehouse_poll then c.print(d.getComputer(),r[1])end;c.handle(d.getComputer(),q,r)os.cancelTimer(p)end end;local function s(t,u)if t~=nil then if peripheral.wrap(t)==nil then error("Invalid transfer chest")end;b.s.transferChest.set(t)end;if u~=nil then if peripheral.wrap(u)==nil then error("Invalid import chest")end;b.s.importChest.set(u)end;if not b.canResume()then error("Missing transfer or import chest")end;a.s.print.set(false)parallel.waitForAll(k,n,o)a.s.print.set(true)term.clear()end;s(arg[1],arg[2])
