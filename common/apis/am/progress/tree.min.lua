local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.ui.base").BaseObject;local c=require("am.ui")local d=require("am.event")local e=require("am.log")local f=require("am.progress.helpers")local g=require("am.progress.base")local h=g:extend("am.progress.TreeWrapper")function h:init(i,j,k)h.super.init(self,i,j,k)self.paused=false;self.names[j.name]=true;return self end;function h:createUI()local l=self.screen.id;local m=self;local n=2;local o=c.Text(c.a.Top(),"",{id=l..".nameText"})local p,q=self.screen.output.getSize()if q<=12 then n=1;o.visible=false end;if _G.RUN_PROGRESS and c.h.isTerm(self.screen.output)then local r=c.Button(c.a.TopRight(),"x",{id=l..".closeButton",fillColor=colors.red,border=0})r:addActivateHandler(function()_G.RUN_PROGRESS=false end)self.screen:add(r)end;self.screen:add(o)self.screen:add(c.Text(c.a.Center(n),"",{id=l..".titleText"}))self.screen:add(c.Text(c.a.Center(n+2),"",{id=l..".rateText"}))self.screen:add(c.Text(c.a.Center(n+4),"",{id=l..".statusText"}))local s=c.Button(c.a.Center(n+5,c.c.Offset.Left,1),"\x8f",{id=l..".haltButton",fillColor=colors.red})s:addActivateHandler(function()e.info(string.format("Halting %s...",self.src.label))d.TurtleRequestHaltEvent(self.src.id):send()end)self.screen:add(s)local t=c.Button(c.a.Center(n+5,c.c.Offset.Right,1),"\x95\x95",{id=l..".pauseButton",fillColor=colors.yellow})t:addActivateHandler(function()if m.paused then e.info(string.format("Continuing %s...",self.src.label))d.TurtleRequestContinueEvent(self.src.id):send()else e.info(string.format("Pausing %s...",self.src.label))d.TurtleRequestPauseEvent(self.src.id):send()end end)self.screen:add(t)self.screen:add(c.Text(c.a.Bottom(),"",{id=l..".posText"}))h.super.createUI(self)end;function h:update(u)local v,q=self.screen.output.getSize()local l=self.screen.id;self.progress=u;local o=self.screen:get(l..".nameText")local w=self.screen:get(l..".titleText")if self.src.label~=nil then local x=self.src.label;if d.online then x="info:"..x end;o:update(x)end;local n=1;if q<=12 then o.obj.visible=false else n=2;o.obj.visible=true end;local y=""w.obj.anchor.y=n;if#self.progress.trees>0 then y=string.format(" (%d)",#self.progress.trees)end;w:update(string.format("Tree%s",y))local z=self.screen:get(l..".rateText")local A=self.screen:get(l..".statusText")local B=self.screen:get(l..".posText")z.obj.anchor.y=n+2;z:update(string.format("%.1f log/min",self.progress.rate))A.obj.anchor.y=n+4;A:update(self.progress.status)local C="pos (%d, %d) e: %d, d: %d"if v<30 then C="(%d,%d) e:%d, d:%d"end;B:update(string.format(C,self.progress.pos.v.x,self.progress.pos.v.z,self.progress.pos.v.y,self.progress.pos.dir))end;function h:updateStatus(D)local l=self.screen.id;local A=self.screen:get(l..".statusText")A:update(D)end;function h:handle(u,E)local l=self.screen.id;if u==d.c.Event.Progress.quarry then self:update(E[1])else local s=self.screen:get(l..".haltButton")local t=self.screen:get(l..".pauseButton")if u==d.c.Event.Turtle.paused then self.paused=true;self.completed=false;t.obj.fillColor=colors.green;t:updateLabel("\x10")self.screen:render()elseif u==d.c.Event.Turtle.started then self.paused=false;self.completed=false;s.obj.visible=true;s:updateLabel("\x8f")t.obj.visible=true;t.obj.fillColor=colors.yellow;t:updateLabel("\x95\x95")self.screen:render()elseif u==d.c.Event.Turtle.exited then self.completed=true;self.paused=false;s.obj.visible=false;t.obj.visible=false;self.screen:render()else self.screen:handle({u,table.unpack(E)})end end end;return h
