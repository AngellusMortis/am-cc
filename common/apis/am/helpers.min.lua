local a=require("cc.expect")local b=require("ext.object")local function c(d)return d.normalize~=nil and d.x~=nil and d.y~=nil and d.z~=nil end;local function e(f,d)a.expect(1,f,"number")if not c(d)then local g=type(d)local h;local i,j=pcall(debug.getinfo,3,"nS")if i and j.name and j.name~=""and j.what~="C"then h=j.name end;if h then error(("bad argument #%d to '%s' (expected Vector, got %s)"):format(f,h,g),3)else error(("bad argument #%d (expected Vector, got %s)"):format(f,g),3)end end end;local function k(d)local l=require("am.log")return b.has(d,"am.p.TurtlePosition")end;local function m(f,d)a.expect(1,f,"number")if not k(d)then local g=type(d)local h;local i,j=pcall(debug.getinfo,3,"nS")if i and j.name and j.name~=""and j.what~="C"then h=j.name end;if h then error(("bad argument #%d to '%s' (expected TurtlePosition, got %s)"):format(f,h,g),3)else error(("bad argument #%d (expected TurtlePosition, got %s)"):format(f,g),3)end end end;local function n(o)return k(o)and o.v.x==0 and o.v.y==0 and o.v.z==0 end;local p={}p.isVector=c;p.requireVector=e;p.isPosition=k;p.requirePosition=m;p.isOrigin=n;return p
