local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.ui.base").BaseObject;local c=require("am.ui")local d=require("am.event")local e=require("log")local f=require("am.core")local g={}local h={}local i=b:extend("am.progress.ProgressWrapper")function i:init(j,k,l)a.expect(1,j,"table")a.expect(2,k,"table")a.expect(3,l,"table")i.super.init(self)self.src=j;self.screen=self:createUI(l)self:update(k)self.screen:render()return self end;function i:createUI(l)return c.Screen(l)end;function i:update(m)self.progress=m end;function i:handle(m,n)end;local o=i:extend("am.progress.QuarryWrapper")function o:init(j,k,l)i.super.init(self,j,k,l)self.paused=false;return self end;function o:createUI(l)local p=c.Screen(l)local q=1;local r=self;local s=c.Button(c.a.Center(10,c.c.Offset.Left),"Stop",{id="haltButton",fillColor=colors.red})s:addActivateHandler(function()e.info(string.format("Halting %s...",self.src.name))d.TurtleRequestHaltEvent(self.src.id):send()end)local t=c.Button(c.a.Center(10,c.c.Offset.Right),"Pause",{id="pauseButton",fillColor=colors.yellow})t:addActivateHandler(function()if r.paused then e.info(string.format("Continuing %s...",self.src.name))d.TurtleRequestContinueEvent(self.src.id):send()else e.info(string.format("Pausing %s...",self.src.name))d.TurtleRequestPauseEvent(self.src.id):send()end end)if self.src.name~=nil then p:add(c.Text(c.a.Top(),"","nameText"))q=2 end;p:add(c.Text(c.a.Center(q),"","titleText"))p:add(c.ProgressBar(c.a.Center(3),{id="totalBar",label="Total",displayTotal=self.progress.job.levels,fillColor=colors.lightGray}))p:add(c.ProgressBar(c.a.Center(6),{id="levelBar",label="Level",total=self.progress.job.left,fillColor=colors.lightGray}))p:add(c.Text(c.a.Center(9),"",{id="statusText"}))p:add(s)p:add(t)p:add(c.Text(c.a.Bottom(),"",{id="posText"}))return p end;function o:update(m)local u,v=self.screen.output.getSize()self.progress=m;if self.src.name~=nil then local w=self.screen:get("nameText")if w~=nil then local x=self.src.name;if d.online then x="info:"..x end;w:update(x)end end;local y=self.screen:get("titleText")local z=self.screen:get("totalBar")local A=self.screen:get("levelBar")local B=self.screen:get("statusText")local C=self.screen:get("posText")y:update(string.format("Quarry: %d x %d (%d)",self.progress.job.left,self.progress.job.forward,self.progress.job.levels))z:update(self.progress.progress.current)A:update(self.progress.progress.completedRows)B:update(self.progress.progress.status)local D="pos (%d, %d) e: %d, d: %d"if u<30 then D="(%d,%d) e:%d, d:%d"end;C:update(string.format(D,self.progress.pos.v.x,self.progress.pos.v.z,self.progress.pos.v.y,self.progress.pos.v.dir))end;function o:handle(m,n)if m==d.c.Event.Progress.quarry then self:update(n[1])elseif m==d.c.Event.Turtle.paused then self.paused=true;local t=self.screen:get("pauseButton")t.obj.fillColor=colors.green;t:updateLabel("Go")elseif m==d.c.Event.Turtle.started then self.paused=false;local s=self.screen:get("haltButton")local t=self.screen:get("pauseButton")s.obj.visible=true;s:updateLabel("Stop")t.obj.visible=true;t.obj.fillColor=colors.yellow;t:updateLabel("Pause")elseif m==d.c.Event.Turtle.exited then local s=self.screen:get("haltButton")local t=self.screen:get("pauseButton")s.obj.visible=false;s:updateLabel("")t.obj.visible=false;t:updateLabel("")else self.screen:handle({m,unpack(n)})end end;local function E(j,m,l)a.expect(1,j,"table")a.expect(2,l,"table","nil")a.expect(3,m,"table","nil")local F=l~=nil and m~=nil;if l~=nil then c.h.requireOutput(l)end;local r=h[j.id]local G=false;if F then if r.event.name~=m.name or not c.h.isSameScreen(r.screen,l)then h[j.id]=nil;r=nil end;if r==nil then G=true;if m.name==d.c.Event.Progress.quarry then r=o(j,m,l)h[j.id]=r end end end;return r,G end;local function H(j,m,l)a.expect(1,j,"table")a.expect(2,m,"table")a.expect(3,l,"table","nil")if l==nil then l=term else c.h.requireOutput(l)end;local r,G=E(j,m,l)if r~=nil and not G then r:update(m)end end;local function I(j,m,n)local r=E(j)if r~=nil then r:handle(m,n)end end;g.print=H;g.handle=I;return g
