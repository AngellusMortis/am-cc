local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.ui.base").BaseObject;local c=require("am.ui")local d=require("am.event")local e=require("am.log")local f=require("am.core")local g={}local h={}local i=b:extend("am.progress.ProgressWrapper")function i:init(j,k,l)a.expect(1,j,"table")a.expect(2,k,"table")a.expect(3,l,"table")i.super.init(self)self.src=j;self.progress=k;self.screen=c.Screen(l,{id="screen."..j.id,backgroundColor=colors.black,textColor=colors.white})return self end;function i:createUI()self:update(self.progress)self.screen:render()end;function i:update(m)self.progress=m end;function i:updateStatus(n)end;function i:handle(m,o)end;local p=i:extend("am.progress.QuarryWrapper")function p:init(j,k,l)p.super.init(self,j,k,l)self.paused=false;return self end;function p:createUI()local q=self;local r=self.screen.id;local s=2;local t=c.Text(c.a.Top(),"",{id=r..".nameText"})local u,v=self.screen.output.getSize()if v<=12 then s=1;t.visible=false end;self.screen:add(t)self.screen:add(c.Text(c.a.Center(s),"",{id=r..".titleText"}))local w=c.Frame(c.a.Anchor(1,s+1),{id=r..".progressFrame",fillHorizontal=true,fillVertical=true,border=0,fillColor=colors.black,textColor=colors.white})self.screen:add(w)w:add(c.ProgressBar(c.a.TopLeft(),{id=r..".totalBar",label="Total",displayTotal=self.progress.job.levels,fillColor=colors.lightGray}))w:add(c.ProgressBar(c.a.Left(4),{id=r..".levelBar",label="Level",total=1,fillColor=colors.lightGray}))w:add(c.Text(c.a.Center(7),"",{id=r..".statusText"}))local x=2;local y=2;if u%2==0 then x=3;y=1 end;local z=c.Button(c.a.Center(8,c.c.Offset.Left,x),"X",{id=r..".haltButton",fillColor=colors.red})z:addActivateHandler(function()e.info(string.format("Halting %s...",self.src.label))d.TurtleRequestHaltEvent(self.src.id):send()end)local A=c.Button(c.a.Center(8,c.c.Offset.Right,y),"||",{id=r..".pauseButton",fillColor=colors.yellow})A:addActivateHandler(function()if q.paused then e.info(string.format("Continuing %s...",self.src.label))d.TurtleRequestContinueEvent(self.src.id):send()else e.info(string.format("Pausing %s...",self.src.label))d.TurtleRequestPauseEvent(self.src.id):send()end end)w:add(z)w:add(A)w:add(c.Text(c.a.Bottom(),"",{id=r..".posText"}))local B=c.Frame(c.a.Anchor(1,s+1),{id=r..".itemsFrame",fillHorizontal=true,fillVertical=true,border=0,fillColor=colors.black,textColor=colors.white})B:add(c.Text(c.a.TopLeft(),"Mined Items",{id=r..".itemsTitle"}))local C=c.Button(c.a.TopRight(),"X",{id=r..".closeItemsButton",fillColor=colors.red,border=0})C:addActivateHandler(function()w:setVisible(true)B:setVisible(false)q.screen:render()end)B:add(C)local D=c.Frame(c.a.Anchor(1,2),{id=r..".itemsListFrame",fillHorizontal=true,border=0,padLeft=1,padTop=1,fillColor=colors.lightGray,textColor=colors.black,scrollBar=true,height=v-s})D:add(c.Text(c.a.TopLeft(),{},{id=r..".itemListText"}))B:add(D)B:setVisible(false)self.screen:add(B)local E=c.Button(c.a.Center(8),"+",{id=r..".itemsButton",fillColor=colors.blue})E:addActivateHandler(function()D.currentScroll=0;w:setVisible(false)B:setVisible(true)q.screen:render()end)w:add(E)p.super.createUI(self)end;function p:update(m)local u,v=self.screen.output.getSize()local r=self.screen.id;self.progress=m;local w=self.screen:get(r..".progressFrame")local D=self.screen:get(r..".itemsListFrame")local t=self.screen:get(r..".nameText")local F=self.screen:get(r..".titleText")local G=w:get(r..".totalBar")local H=w:get(r..".levelBar")local I=w:get(r..".statusText")local J=w:get(r..".posText")local K=D:get(r..".itemListText")if self.src.label~=nil then local L=self.src.label;if d.online then L="info:"..L end;t:update(L)end;local s=1;if v<=12 then t.obj.visible=false else s=2;t.obj.visible=true end;F.obj.anchor.y=s;w.obj.anchor.y=s+1;local M=v-s;local N=g.itemStrings(self.progress.progress.items)D.obj.height=math.max(M,#N+2)K:update(N)local O=""if self.progress.job.left~=nil and self.progress.job.forward~=nil then O=string.format(": %d x %d (%d)",self.progress.job.left,self.progress.job.forward,self.progress.job.levels)end;F:update(string.format("Quarry%s",O))G.obj.displayTotal=self.progress.job.levels;G:update(self.progress.progress.current*100)if self.progress.progress.hitBedrock then G:updateLabel("Total (Bedrock)")end;if self.progress.job.left~=nil then H.obj.total=self.progress.job.left end;H:update(self.progress.progress.completedRows)I:update(self.progress.progress.status)local P="pos (%d, %d) e: %d, d: %d"if u<30 then P="(%d,%d) e:%d, d:%d"end;J:update(string.format(P,self.progress.pos.v.x,self.progress.pos.v.z,self.progress.pos.v.y,self.progress.pos.dir))local B=self.screen:get(r..".itemsFrame")B.obj.anchor.y=s+1 end;function p:updateStatus(n)local r=self.screen.id;local I=self.screen:get(r..".statusText")I:update(n)end;function p:handle(m,o)local r=self.screen.id;if m==d.c.Event.Progress.quarry then self:update(o[1])elseif m==d.c.Event.Turtle.paused then self.paused=true;local A=self.screen:get(r..".pauseButton")A.obj.fillColor=colors.green;A:updateLabel("\x10")self.screen:render()elseif m==d.c.Event.Turtle.started then self.paused=false;local w=self.screen:get(r..".progressFrame")local z=w:get(r..".haltButton")local A=w:get(r..".pauseButton")z.obj.visible=w.obj.visible;z:updateLabel("X")A.obj.visible=w.obj.visible;A.obj.fillColor=colors.yellow;A:updateLabel("||")self.screen:render()elseif m==d.c.Event.Turtle.exited then local z=self.screen:get(r..".haltButton")local A=self.screen:get(r..".pauseButton")z.obj.visible=false;A.obj.visible=false;self.screen:render()else self.screen:handle({m,unpack(o)})end end;local function Q(R,S)return R.count<S.count end;local function T(R,S)return R.count>S.count end;local U={"K","M","T","P"}local function V(W)local X=0;while W>1000 do W=W/1000;X=X+1 end;if X==0 then return tostring(W)end;return string.format("%.1f%s",W,U[X])end;local function Y(N,Z)if Z==nil then Z=false end;local _={}for a0,a1 in pairs(N)do _[#_+1]=a1 end;if Z then table.sort(_,Q)else table.sort(_,T)end;local a2={}for a0,a1 in ipairs(_)do a2[#a2+1]=string.format("%5sx %s",V(a1.count),a1.displayName)end;return a2 end;local function a3(j,m,l)a.expect(1,j,"table")a.expect(2,l,"table","nil")a.expect(3,m,"table","nil")local a4=l~=nil and m~=nil;if l~=nil then c.h.requireOutput(l)end;local q=h[j.id]local a5=false;if a4 then if q~=nil then if q.progress.name~=m.name or not c.h.isSameScreen(q.screen.output,l)then h[j.id]=nil;q=nil end end;if q==nil then a5=true;if m.name==d.c.Event.Progress.quarry then q=p(j,m,l)q:createUI()h[j.id]=q end end end;return q,a5 end;local function a6(l)for a7,q in pairs(h)do if c.h.isSameScreen(l,q.screen.output)then return{id=a7}end end;return nil end;local function a8(j,n)a.expect(1,j,"table")a.expect(2,n,"string")local q=a3(j)if q~=nil then q:updateStatus(n)end end;local function a9(j,m,l)a.expect(1,j,"table")a.expect(2,m,"table")a.expect(3,l,"table","nil")if l==nil then l=term else c.h.requireOutput(l)end;local q,a5=a3(j,m,l)if q~=nil and not a5 then q:update(m)end end;local function aa(m,o)for a0,q in pairs(h)do q:handle(m,o)end end;local function ab(j,m,o)local ac=nil;if c.c.l.Events.Always[m]then aa(m,o)return elseif c.c.l.Events.UI[m]then local ad=f.split(o[1].objId,".")if ad[1]=="screen"then ac={id=tonumber(ad[2])}end elseif c.c.l.Events.Terminal[m]then ac=a6(term)elseif c.c.l.Events.Monitor[m]then ac=a6(peripheral.wrap(o[1]))end;if ac~=nil then j=ac end;local q,a0=a3(j)if q~=nil then q:handle(m,o)end end;g.updateStatus=a8;g.print=a9;g.handle=ab;g.itemStrings=Y;return g
