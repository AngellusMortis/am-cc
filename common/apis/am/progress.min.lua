local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.ui.base").BaseObject;local c=require("am.ui")local d=require("am.event")local e=require("am.log")local f=require("am.core")local g={}local h={}local i=b:extend("am.progress.ProgressWrapper")function i:init(j,k,l)a.expect(1,j,"table")a.expect(2,k,"table")a.expect(3,l,"table")i.super.init(self)self.src=j;self.progress=k;self.screen=c.Screen(l,{id="screen."..j.id,backgroundColor=colors.black,textColor=colors.white})return self end;function i:createUI()self:update(self.progress)self.screen:render()end;function i:update(m)self.progress=m end;function i:updateStatus(n)end;function i:handle(m,o)end;local p=i:extend("am.progress.QuarryWrapper")function p:init(j,k,l)p.super.init(self,j,k,l)self.paused=false;return self end;function p:createUI()local q=self;local r=self.screen.id;local s=2;local t=c.Text(c.a.Top(),"",{id=r..".nameText"})local u,v=self.screen.output.getSize()if v<=12 then s=1;t.visible=false end;if _G.RUN_PROGRESS~=nil and c.h.isTerm(self.screen.output)then local w=c.Button(c.a.TopRight(),"x",{id=r..".closeButton",fillColor=colors.red,border=0})w:addActivateHandler(function()_G.RUN_PROGRESS=false end)self.screen:add(w)end;self.screen:add(t)self.screen:add(c.Text(c.a.Center(s),"",{id=r..".titleText"}))local x=c.Frame(c.a.Anchor(1,s+1),{id=r..".progressFrame",fillHorizontal=true,fillVertical=true,border=0,fillColor=colors.black,textColor=colors.white})self.screen:add(x)x:add(c.ProgressBar(c.a.TopLeft(),{id=r..".totalBar",label="Total",displayTotal=self.progress.job.levels,fillColor=colors.lightGray}))x:add(c.ProgressBar(c.a.Left(4),{id=r..".levelBar",label="Level",total=1,fillColor=colors.lightGray}))x:add(c.Text(c.a.Center(7),"",{id=r..".statusText"}))local y=2;local z=2;if u%2==0 then y=3;z=1 end;local A=c.Button(c.a.Center(8,c.c.Offset.Left,y),"\x8f",{id=r..".haltButton",fillColor=colors.red})A:addActivateHandler(function()e.info(string.format("Halting %s...",self.src.label))d.TurtleRequestHaltEvent(self.src.id):send()end)local B=c.Button(c.a.Center(8,c.c.Offset.Right,z),"\x95\x95",{id=r..".pauseButton",fillColor=colors.yellow})B:addActivateHandler(function()if q.paused then e.info(string.format("Continuing %s...",self.src.label))d.TurtleRequestContinueEvent(self.src.id):send()else e.info(string.format("Pausing %s...",self.src.label))d.TurtleRequestPauseEvent(self.src.id):send()end end)x:add(A)x:add(B)x:add(c.Text(c.a.Bottom(),"",{id=r..".posText"}))local C=c.Frame(c.a.Anchor(1,s+1),{id=r..".itemsFrame",fillHorizontal=true,fillVertical=true,border=0,fillColor=colors.black,textColor=colors.white})C:add(c.Text(c.a.TopLeft(),"Mined Items",{id=r..".itemsTitle"}))local D=c.Button(c.a.TopRight(),"x",{id=r..".closeItemsButton",fillColor=colors.red,border=0})D:addActivateHandler(function()x:setVisible(true)C:setVisible(false)q.screen:render()end)C:add(D)local E=c.Frame(c.a.Anchor(1,2),{id=r..".itemsListFrame",fillHorizontal=true,border=0,padLeft=1,padTop=1,fillColor=colors.lightGray,textColor=colors.black,scrollBar=true,height=v-s})E:add(c.Text(c.a.TopLeft(),{},{id=r..".itemListText"}))C:add(E)C:setVisible(false)self.screen:add(C)local F=c.Button(c.a.Center(8),"\x17",{id=r..".itemsButton",fillColor=colors.blue})F:addActivateHandler(function()E.currentScroll=0;x:setVisible(false)C:setVisible(true)q.screen:render()end)x:add(F)p.super.createUI(self)end;function p:update(m)local u,v=self.screen.output.getSize()local r=self.screen.id;self.progress=m;local x=self.screen:get(r..".progressFrame")local E=self.screen:get(r..".itemsListFrame")local t=self.screen:get(r..".nameText")local G=self.screen:get(r..".titleText")local H=x:get(r..".totalBar")local I=x:get(r..".levelBar")local J=x:get(r..".statusText")local K=x:get(r..".posText")local L=E:get(r..".itemListText")if self.src.label~=nil then local M=self.src.label;if d.online then M="info:"..M end;t:update(M)end;local s=1;if v<=12 then t.obj.visible=false else s=2;t.obj.visible=true end;G.obj.anchor.y=s;x.obj.anchor.y=s+1;local N=v-s;local O=g.itemStrings(self.progress.progress.items)E.obj.height=math.max(N,#O+2)L:update(O)local P=""if self.progress.job.left~=nil and self.progress.job.forward~=nil then P=string.format(": %d x %d (%d)",self.progress.job.left,self.progress.job.forward,self.progress.job.levels)end;G:update(string.format("Quarry%s",P))H.obj.displayTotal=self.progress.job.levels;H:update(self.progress.progress.current*100)if self.progress.progress.hitBedrock then H:updateLabel("Total (Bedrock)")end;if self.progress.job.left~=nil then I.obj.total=self.progress.job.left end;I:update(self.progress.progress.completedRows)J:update(self.progress.progress.status)local Q="pos (%d, %d) e: %d, d: %d"if u<30 then Q="(%d,%d) e:%d, d:%d"end;K:update(string.format(Q,self.progress.pos.v.x,self.progress.pos.v.z,self.progress.pos.v.y,self.progress.pos.dir))local C=self.screen:get(r..".itemsFrame")C.obj.anchor.y=s+1 end;function p:updateStatus(n)local r=self.screen.id;local J=self.screen:get(r..".statusText")J:update(n)end;function p:handle(m,o)local r=self.screen.id;if m==d.c.Event.Progress.quarry then self:update(o[1])elseif m==d.c.Event.Turtle.paused then self.paused=true;local B=self.screen:get(r..".pauseButton")B.obj.fillColor=colors.green;B:updateLabel("\x10")self.screen:render()elseif m==d.c.Event.Turtle.started then self.paused=false;local x=self.screen:get(r..".progressFrame")local A=x:get(r..".haltButton")local B=x:get(r..".pauseButton")A.obj.visible=x.obj.visible;A:updateLabel("\x8f")B.obj.visible=x.obj.visible;B.obj.fillColor=colors.yellow;B:updateLabel("\x95\x95")self.screen:render()elseif m==d.c.Event.Turtle.exited then local A=self.screen:get(r..".haltButton")local B=self.screen:get(r..".pauseButton")A.obj.visible=false;B.obj.visible=false;self.screen:render()else self.screen:handle({m,unpack(o)})end end;local function R(S,T)return S.count<T.count end;local function U(S,T)return S.count>T.count end;local function V(S,T)return S.displayName:lower()<T.displayName:lower()end;local function W(S,T)return S.displayName:lower()>T.displayName:lower()end;local X={"K","M","T","P"}local function Y(Z)local _=0;while Z>1000 do Z=Z/1000;_=_+1 end;if _==0 then return tostring(Z)end;return string.format("%.1f%s",Z,X[_])end;local function a0(O,a1,a2)if a1==nil then a1=false end;if a2==nil then a2=true end;local a3={}for a4,a5 in pairs(O)do a3[#a3+1]=a5 end;if a2 then if a1 then table.sort(a3,R)else table.sort(a3,U)end else if a1 then table.sort(a3,R)else table.sort(a3,U)end end;local a6={}for a4,a5 in ipairs(a3)do a6[#a6+1]=string.format("%5sx %s",Y(a5.count),a5.displayName)end;return a6 end;local function a7(j,m,l)a.expect(1,j,"table")a.expect(2,l,"table","nil")a.expect(3,m,"table","nil")local a8=l~=nil and m~=nil;if l~=nil then c.h.requireOutput(l)end;local q=h[j.id]local a9=false;if a8 then if q~=nil then if q.progress.name~=m.name or not c.h.isSameScreen(q.screen.output,l)then h[j.id]=nil;q=nil end end;if q==nil then a9=true;if m.name==d.c.Event.Progress.quarry then q=p(j,m,l)q:createUI()h[j.id]=q end end end;return q,a9 end;local function aa(l)for ab,q in pairs(h)do if c.h.isSameScreen(l,q.screen.output)then return{id=ab}end end;return nil end;local function ac(j,n)a.expect(1,j,"table")a.expect(2,n,"string")local q=a7(j)if q~=nil then q:updateStatus(n)end end;local function ad(j,m,l)a.expect(1,j,"table")a.expect(2,m,"table")a.expect(3,l,"table","nil")if l==nil then l=term else c.h.requireOutput(l)end;local q,a9=a7(j,m,l)if q~=nil and not a9 then q:update(m)end end;local function ae(m,o)for a4,q in pairs(h)do q:handle(m,o)end end;local function af(j,m,o)local ag=nil;if c.c.l.Events.Always[m]then ae(m,o)return elseif c.c.l.Events.UI[m]then local ah=f.split(o[1].objId,".")if ah[1]=="screen"then ag={id=tonumber(ah[2])}end elseif c.c.l.Events.Terminal[m]then ag=aa(term)elseif c.c.l.Events.Monitor[m]then ag=aa(peripheral.wrap(o[1]))end;if ag~=nil then j=ag end;local q,a4=a7(j)if q~=nil then q:handle(m,o)end end;g.updateStatus=ac;g.print=ad;g.handle=af;g.itemStrings=a0;return g
