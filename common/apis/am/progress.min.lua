local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.ui.base").BaseObject;local c=require("am.ui")local d=require("am.event")local e=require("am.log")local f=require("am.core")local g={}local h={}local i=b:extend("am.progress.ProgressWrapper")function i:init(j,k,l)a.expect(1,j,"table")a.expect(2,k,"table")a.expect(3,l,"table")i.super.init(self)self.src=j;self.progress=k;self.screen=c.Screen(l,{id="screen."..j.id})return self end;function i:createUI()self:update(self.progress)self.screen:render()end;function i:update(m)self.progress=m end;function i:updateStatus(n)end;function i:handle(m,o)end;local p=i:extend("am.progress.QuarryWrapper")function p:init(j,k,l)p.super.init(self,j,k,l)self.paused=false;return self end;function p:createUI()local q=self;local r=self.screen.id;local s=c.Button(c.a.Center(10,c.c.Offset.Left),"Stop",{id=r..".haltButton",fillColor=colors.red})s:addActivateHandler(function()e.info(string.format("Halting %s...",self.src.label))d.TurtleRequestHaltEvent(self.src.id):send()end)local t=c.Button(c.a.Center(10,c.c.Offset.Right),"Pause",{id=r..".pauseButton",fillColor=colors.yellow})t:addActivateHandler(function()if q.paused then e.info(string.format("Continuing %s...",self.src.label))d.TurtleRequestContinueEvent(self.src.id):send()else e.info(string.format("Pausing %s...",self.src.label))d.TurtleRequestPauseEvent(self.src.id):send()end end)self.screen:add(c.Text(c.a.Top(),"",{id=r..".nameText"}))self.screen:add(c.Text(c.a.Center(2),"",{id=r..".titleText"}))self.screen:add(c.ProgressBar(c.a.Left(3),{id=r..".totalBar",label="Total",displayTotal=self.progress.job.levels,fillColor=colors.lightGray}))self.screen:add(c.ProgressBar(c.a.Left(6),{id=r..".levelBar",label="Level",total=1,fillColor=colors.lightGray}))self.screen:add(c.Text(c.a.Center(9),"",{id=r..".statusText"}))self.screen:add(s)self.screen:add(t)self.screen:add(c.Text(c.a.Bottom(),"",{id=r..".posText"}))p.super.createUI(self)end;function p:update(m)local u,v=self.screen.output.getSize()local r=self.screen.id;self.progress=m;if self.src.label~=nil then local w=self.screen:get(r..".nameText")if w~=nil then local x=self.src.label;if d.online then x="info:"..x end;w:update(x)end end;local y=self.screen:get(r..".titleText")local z=self.screen:get(r..".totalBar")local A=self.screen:get(r..".levelBar")local B=self.screen:get(r..".statusText")local C=self.screen:get(r..".posText")local D=""if self.progress.job.left~=nil and self.progress.job.forward~=nil then D=string.format(": %d x %d (%d)",self.progress.job.left,self.progress.job.forward,self.progress.job.levels)end;y:update(string.format("Quarry%s",D))z.obj.displayTotal=self.progress.job.levels;z:update(self.progress.progress.current*100)if self.progress.progress.hitBedrock then z:updateLabel("Total (Bedrock)")end;if self.progress.job.left~=nil then A.obj.total=self.progress.job.left end;A:update(self.progress.progress.completedRows)B:update(self.progress.progress.status)local E="pos (%d, %d) e: %d, d: %d"if u<30 then E="(%d,%d) e:%d, d:%d"end;C:update(string.format(E,self.progress.pos.v.x,self.progress.pos.v.z,self.progress.pos.v.y,self.progress.pos.dir))end;function p:updateStatus(n)local r=self.screen.id;local B=self.screen:get(r..".statusText")B:update(n)end;function p:handle(m,o)local r=self.screen.id;if m==d.c.Event.Progress.quarry then self:update(o[1])elseif m==d.c.Event.Turtle.paused then self.paused=true;local t=self.screen:get(r..".pauseButton")t.obj.fillColor=colors.green;t:updateLabel("Go")self.screen:render()elseif m==d.c.Event.Turtle.started then self.paused=false;local s=self.screen:get(r..".haltButton")local t=self.screen:get(r..".pauseButton")s.obj.visible=true;s:updateLabel("Stop")t.obj.visible=true;t.obj.fillColor=colors.yellow;t:updateLabel("Pause")self.screen:render()elseif m==d.c.Event.Turtle.exited then local s=self.screen:get(r..".haltButton")local t=self.screen:get(r..".pauseButton")s.obj.visible=false;t.obj.visible=false;self.screen:render()else self.screen:handle({m,unpack(o)})end end;local function F(G,H)return G.count<H.count end;local function I(G,H)return G.count>H.count end;local function J(K,L)if L==nil then L=false end;local M={}for v,N in pairs(K)do M[#M+1]=N end;if L then table.sort(M,F)else table.sort(M,I)end;local O={}for v,N in ipairs(M)do O[#O+1]=string.format("%dx %s",N.count,N.displayName)end;return O end;local function P(j,m,l)a.expect(1,j,"table")a.expect(2,l,"table","nil")a.expect(3,m,"table","nil")local Q=l~=nil and m~=nil;if l~=nil then c.h.requireOutput(l)end;local q=h[j.id]local R=false;if Q then if q~=nil then if q.progress.name~=m.name or not c.h.isSameScreen(q.screen.output,l)then h[j.id]=nil;q=nil end end;if q==nil then R=true;if m.name==d.c.Event.Progress.quarry then q=p(j,m,l)q:createUI()h[j.id]=q end end end;return q,R end;local function S(l)for T,q in pairs(h)do if c.h.isSameScreen(l,q.screen.output)then return{id=T}end end;return nil end;local function U(j,n)a.expect(1,j,"table")a.expect(2,n,"string")local q=P(j)if q~=nil then q:updateStatus(n)end end;local function V(j,m,l)a.expect(1,j,"table")a.expect(2,m,"table")a.expect(3,l,"table","nil")if l==nil then l=term else c.h.requireOutput(l)end;local q,R=P(j,m,l)if q~=nil and not R then q:update(m)end end;local function W(m,o)for v,q in pairs(h)do q:handle(m,o)end end;local function X(j,m,o)local Y=nil;if c.c.l.Events.Always[m]then W(m,o)return elseif c.c.l.Events.UI[m]then local Z=f.split(o[1].objId,".")if Z[1]=="screen"then Y={id=tonumber(Z[2])}end elseif c.c.l.Events.Terminal[m]then Y=S(term)elseif c.c.l.Events.Monitor[m]then Y=S(peripheral.wrap(o[1]))end;if Y~=nil then j=Y end;local q,v=P(j)if q~=nil then q:handle(m,o)end end;g.updateStatus=U;g.print=V;g.handle=X;g.itemStrings=J;return g
