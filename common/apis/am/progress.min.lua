local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.ui.base").BaseObject;local c=require("am.ui")local d=require("am.event")local e=require("am.log")local f=require("am.core")local g={}local h={}local i=b:extend("am.progress.ProgressWrapper")function i:init(j,k,l)a.expect(1,j,"table")a.expect(2,k,"table")a.expect(3,l,"table")i.super.init(self)self.src=j;self.progress=k;self.screen=c.Screen(l)return self end;function i:createUI()self:update(self.progress)self.screen:render()end;function i:update(m)self.progress=m end;function i:updateStatus(n)end;function i:handle(m,o)end;local p=i:extend("am.progress.QuarryWrapper")function p:init(j,k,l)p.super.init(self,j,k,l)self.paused=false;return self end;function p:createUI()local q=self;local r=c.Button(c.a.Center(10,c.c.Offset.Left),"Stop",{id="haltButton",fillColor=colors.red})r:addActivateHandler(function()e.info(string.format("Halting %s...",self.src.label))d.TurtleRequestHaltEvent(self.src.id):send()end)local s=c.Button(c.a.Center(10,c.c.Offset.Right),"Pause",{id="pauseButton",fillColor=colors.yellow})s:addActivateHandler(function()if q.paused then e.info(string.format("Continuing %s...",self.src.label))d.TurtleRequestContinueEvent(self.src.id):send()else e.info(string.format("Pausing %s...",self.src.label))d.TurtleRequestPauseEvent(self.src.id):send()end end)self.screen:add(c.Text(c.a.Top(),"",{id="nameText"}))self.screen:add(c.Text(c.a.Center(2),"",{id="titleText"}))self.screen:add(c.ProgressBar(c.a.Left(3),{id="totalBar",label="Total",displayTotal=self.progress.job.levels,fillColor=colors.lightGray}))self.screen:add(c.ProgressBar(c.a.Left(6),{id="levelBar",label="Level",total=self.progress.job.left,fillColor=colors.lightGray}))self.screen:add(c.Text(c.a.Center(9),"",{id="statusText"}))self.screen:add(r)self.screen:add(s)self.screen:add(c.Text(c.a.Bottom(),"",{id="posText"}))p.super.createUI(self)end;function p:update(m)local t,u=self.screen.output.getSize()self.progress=m;if self.src.label~=nil then local v=self.screen:get("nameText")if v~=nil then local w=self.src.label;if d.online then w="info:"..w end;v:update(w)end end;local x=self.screen:get("titleText")local y=self.screen:get("totalBar")local z=self.screen:get("levelBar")local A=self.screen:get("statusText")local B=self.screen:get("posText")x:update(string.format("Quarry: %d x %d (%d)",self.progress.job.left,self.progress.job.forward,self.progress.job.levels))y:update(self.progress.progress.current)z:update(self.progress.progress.completedRows)A:update(self.progress.progress.status)local C="pos (%d, %d) e: %d, d: %d"if t<30 then C="(%d,%d) e:%d, d:%d"end;B:update(string.format(C,self.progress.pos.v.x,self.progress.pos.v.z,self.progress.pos.v.y,self.progress.pos.dir))end;function p:updateStatus(n)local A=self.screen:get("statusText")A:update(n)end;function p:handle(m,o)if m==d.c.Event.Progress.quarry then self:update(o[1])elseif m==d.c.Event.Turtle.paused then self.paused=true;local s=self.screen:get("pauseButton")s.obj.fillColor=colors.green;s:updateLabel("Go")elseif m==d.c.Event.Turtle.started then self.paused=false;local r=self.screen:get("haltButton")local s=self.screen:get("pauseButton")r.obj.visible=true;r:updateLabel("Stop")s.obj.visible=true;s.obj.fillColor=colors.yellow;s:updateLabel("Pause")elseif m==d.c.Event.Turtle.exited then local r=self.screen:get("haltButton")local s=self.screen:get("pauseButton")r.obj.visible=false;r:updateLabel("")s.obj.visible=false;s:updateLabel("")else self.screen:handle({m,unpack(o)})end end;local function D(j,m,l)a.expect(1,j,"table")a.expect(2,l,"table","nil")a.expect(3,m,"table","nil")local E=l~=nil and m~=nil;if l~=nil then c.h.requireOutput(l)end;local q=h[j.id]local F=false;if E then if q~=nil then if q.event.name~=m.name or not c.h.isSameScreen(q.screen,l)then h[j.id]=nil;q=nil end end;if q==nil then F=true;if m.name==d.c.Event.Progress.quarry then q=p(j,m,l)q:createUI()h[j.id]=q end end end;return q,F end;local function G(j,n)a.expect(1,j,"table")a.expect(2,n,"string")local q=D(j)if q~=nil then q:updateStatus(n)end end;local function H(j,m,l)a.expect(1,j,"table")a.expect(2,m,"table")a.expect(3,l,"table","nil")if l==nil then l=term else c.h.requireOutput(l)end;local q,F=D(j,m,l)if q~=nil and not F then q:update(m)end end;local function I(j,m,o)local q,F=D(j)if q~=nil then q:handle(m,o)end end;g.updateStatus=G;g.print=H;g.handle=I;return g
