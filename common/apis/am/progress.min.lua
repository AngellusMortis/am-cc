local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.ui.base").BaseObject;local c=require("am.ui")local d=require("am.event")local e=require("am.log")local f=require("am.core")local g={}local h={}local i=b:extend("am.progress.ProgressWrapper")function i:init(j,k,l)a.expect(1,j,"table")a.expect(2,k,"table")a.expect(3,l,"table")i.super.init(self)self.src=j;self.progress=k;self.screen=c.Screen(l,{id="screen."..j.id,backgroundColor=colors.black,textColor=colors.white})return self end;function i:createUI()self:update(self.progress)self.screen:render()end;function i:update(m)self.progress=m end;function i:updateStatus(n)end;function i:handle(m,o)end;local p=i:extend("am.progress.QuarryWrapper")function p:init(j,k,l)p.super.init(self,j,k,l)self.paused=false;return self end;function p:createUI()local q=self;local r=self.screen.id;local s=2;local t=c.Text(c.a.Top(),"",{id=r..".nameText"})local u,v=self.screen.output.getSize()if v<=12 then s=1;t.visible=false end;self.screen:add(t)self.screen:add(c.Text(c.a.Center(s),"",{id=r..".titleText"}))local w=c.Frame(c.a.Anchor(1,s+1),{id=r..".progressFrame",fillHorizontal=true,fillVertical=true,border=0,fillColor=colors.black,textColor=colors.white})self.screen:add(w)w:add(c.ProgressBar(c.a.TopLeft(),{id=r..".totalBar",label="Total",displayTotal=self.progress.job.levels,fillColor=colors.lightGray}))w:add(c.ProgressBar(c.a.Left(4),{id=r..".levelBar",label="Level",total=1,fillColor=colors.lightGray}))w:add(c.Text(c.a.Center(7),"",{id=r..".statusText"}))local x=c.Button(c.a.Center(8,c.c.Offset.Left,4),"Stop",{id=r..".haltButton",fillColor=colors.red})x:addActivateHandler(function()e.info(string.format("Halting %s...",self.src.label))d.TurtleRequestHaltEvent(self.src.id):send()end)local y=c.Button(c.a.Center(8,c.c.Offset.Right,4),"Pause",{id=r..".pauseButton",fillColor=colors.yellow})y:addActivateHandler(function()if q.paused then e.info(string.format("Continuing %s...",self.src.label))d.TurtleRequestContinueEvent(self.src.id):send()else e.info(string.format("Pausing %s...",self.src.label))d.TurtleRequestPauseEvent(self.src.id):send()end end)w:add(x)w:add(y)w:add(c.Text(c.a.Bottom(),"",{id=r..".posText"}))local z=c.Frame(c.a.Anchor(1,s+1),{id=r..".itemsFrame",fillHorizontal=true,fillVertical=true,border=0,fillColor=colors.black,textColor=colors.white})z:add(c.Text(c.a.TopLeft(),"Mined Items",{id=r..".itemsTitle"}))local A=c.Button(c.a.TopRight(),"X",{id=r..".closeItemsButton",fillColor=colors.red,border=0})A:addActivateHandler(function()w:setVisible(true)z:setVisible(false)q.screen:render()end)z:add(A)local B=c.Frame(c.a.Anchor(1,2),{id=r..".itemsListFrame",fillHorizontal=true,border=0,padLeft=1,padTop=1,fillColor=colors.lightGray,textColor=colors.black,scrollBar=true,height=v-s})B:add(c.Text(c.a.TopLeft(),{},{id=r..".itemListText"}))z:add(B)z:setVisible(false)self.screen:add(z)local C=c.Button(c.a.Center(8),"Items",{id=r..".itemsButton",fillColor=colors.blue})C:addActivateHandler(function()B.currentScroll=0;w:setVisible(false)z:setVisible(true)q.screen:render()end)w:add(C)p.super.createUI(self)end;function p:update(m)local D,v=self.screen.output.getSize()local r=self.screen.id;self.progress=m;local w=self.screen:get(r..".progressFrame")local B=self.screen:get(r..".itemsListFrame")local t=self.screen:get(r..".nameText")local E=self.screen:get(r..".titleText")local F=w:get(r..".totalBar")local G=w:get(r..".levelBar")local H=w:get(r..".statusText")local I=w:get(r..".posText")local J=B:get(r..".itemListText")if self.src.label~=nil then local K=self.src.label;if d.online then K="info:"..K end;t:update(K)end;local s=1;if v<=12 then t.obj.visible=false else s=2;t.obj.visible=true end;E.obj.anchor.y=s;w.obj.anchor.y=s+1;local L=v-s;local M=g.itemStrings(self.progress.progress.items)B.obj.height=math.max(L,#M)J:update(M)local N=""if self.progress.job.left~=nil and self.progress.job.forward~=nil then N=string.format(": %d x %d (%d)",self.progress.job.left,self.progress.job.forward,self.progress.job.levels)end;E:update(string.format("Quarry%s",N))F.obj.displayTotal=self.progress.job.levels;F:update(self.progress.progress.current*100)if self.progress.progress.hitBedrock then F:updateLabel("Total (Bedrock)")end;if self.progress.job.left~=nil then G.obj.total=self.progress.job.left end;G:update(self.progress.progress.completedRows)H:update(self.progress.progress.status)local O="pos (%d, %d) e: %d, d: %d"if D<30 then O="(%d,%d) e:%d, d:%d"end;I:update(string.format(O,self.progress.pos.v.x,self.progress.pos.v.z,self.progress.pos.v.y,self.progress.pos.dir))local z=self.screen:get(r..".itemsFrame")z.obj.anchor.y=s+1 end;function p:updateStatus(n)local r=self.screen.id;local H=self.screen:get(r..".statusText")H:update(n)end;function p:handle(m,o)local r=self.screen.id;if m==d.c.Event.Progress.quarry then self:update(o[1])elseif m==d.c.Event.Turtle.paused then self.paused=true;local y=self.screen:get(r..".pauseButton")y.obj.fillColor=colors.green;y:updateLabel("Go")self.screen:render()elseif m==d.c.Event.Turtle.started then self.paused=false;local w=self.screen:get(r..".progressFrame")local x=w:get(r..".haltButton")local y=w:get(r..".pauseButton")x.obj.visible=w.obj.visible;x:updateLabel("Stop")y.obj.visible=w.obj.visible;y.obj.fillColor=colors.yellow;y:updateLabel("Pause")self.screen:render()elseif m==d.c.Event.Turtle.exited then local x=self.screen:get(r..".haltButton")local y=self.screen:get(r..".pauseButton")x.obj.visible=false;y.obj.visible=false;self.screen:render()else self.screen:handle({m,unpack(o)})end end;local function P(Q,R)return Q.count<R.count end;local function S(Q,R)return Q.count>R.count end;local function T(M,U)if U==nil then U=false end;local V={}for u,W in pairs(M)do V[#V+1]=W end;if U then table.sort(V,P)else table.sort(V,S)end;local X={}for u,W in ipairs(V)do X[#X+1]=string.format("%dx %s",W.count,W.displayName)end;return X end;local function Y(j,m,l)a.expect(1,j,"table")a.expect(2,l,"table","nil")a.expect(3,m,"table","nil")local Z=l~=nil and m~=nil;if l~=nil then c.h.requireOutput(l)end;local q=h[j.id]local _=false;if Z then if q~=nil then if q.progress.name~=m.name or not c.h.isSameScreen(q.screen.output,l)then h[j.id]=nil;q=nil end end;if q==nil then _=true;if m.name==d.c.Event.Progress.quarry then q=p(j,m,l)q:createUI()h[j.id]=q end end end;return q,_ end;local function a0(l)for a1,q in pairs(h)do if c.h.isSameScreen(l,q.screen.output)then return{id=a1}end end;return nil end;local function a2(j,n)a.expect(1,j,"table")a.expect(2,n,"string")local q=Y(j)if q~=nil then q:updateStatus(n)end end;local function a3(j,m,l)a.expect(1,j,"table")a.expect(2,m,"table")a.expect(3,l,"table","nil")if l==nil then l=term else c.h.requireOutput(l)end;local q,_=Y(j,m,l)if q~=nil and not _ then q:update(m)end end;local function a4(m,o)for u,q in pairs(h)do q:handle(m,o)end end;local function a5(j,m,o)local a6=nil;if c.c.l.Events.Always[m]then a4(m,o)return elseif c.c.l.Events.UI[m]then local a7=f.split(o[1].objId,".")if a7[1]=="screen"then a6={id=tonumber(a7[2])}end elseif c.c.l.Events.Terminal[m]then a6=a0(term)elseif c.c.l.Events.Monitor[m]then a6=a0(peripheral.wrap(o[1]))end;if a6~=nil then j=a6 end;local q,u=Y(j)if q~=nil then q:handle(m,o)end end;g.updateStatus=a2;g.print=a3;g.handle=a5;g.itemStrings=T;return g
