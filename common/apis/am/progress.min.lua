local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.ui.base").BaseObject;local c=require("am.ui")local d=require("am.event")local e=require("am.log")local f=require("am.core")local g={}local h={}local i=b:extend("am.progress.ProgressWrapper")function i:init(j,k,l)a.expect(1,j,"table")a.expect(2,k,"table")a.expect(3,l,"table")i.super.init(self)self.src=j;self.progress=k;self.screen=c.Screen(l,{id="screen."..j.id})e.debug(self.screen.id)return self end;function i:createUI()self:update(self.progress)self.screen:render()end;function i:update(m)self.progress=m end;function i:updateStatus(n)end;function i:handle(m,o)end;local p=i:extend("am.progress.QuarryWrapper")function p:init(j,k,l)p.super.init(self,j,k,l)self.paused=false;return self end;function p:createUI()local q=self;local r=self.screen.id;local s=c.Button(c.a.Center(10,c.c.Offset.Left),"Stop",{id=r..".haltButton",fillColor=colors.red})s:addActivateHandler(function()e.info(string.format("Halting %s...",self.src.label))d.TurtleRequestHaltEvent(self.src.id):send()end)local t=c.Button(c.a.Center(10,c.c.Offset.Right),"Pause",{id=r..".pauseButton",fillColor=colors.yellow})t:addActivateHandler(function()if q.paused then e.info(string.format("Continuing %s...",self.src.label))d.TurtleRequestContinueEvent(self.src.id):send()else e.info(string.format("Pausing %s...",self.src.label))d.TurtleRequestPauseEvent(self.src.id):send()end end)self.screen:add(c.Text(c.a.Top(),"",{id=r..".nameText"}))self.screen:add(c.Text(c.a.Center(2),"",{id=r..".titleText"}))self.screen:add(c.ProgressBar(c.a.Left(3),{id=r..".totalBar",label="Total",displayTotal=self.progress.job.levels,fillColor=colors.lightGray}))self.screen:add(c.ProgressBar(c.a.Left(6),{id=r..".levelBar",label="Level",total=self.progress.job.left,fillColor=colors.lightGray}))self.screen:add(c.Text(c.a.Center(9),"",{id=r..".statusText"}))self.screen:add(s)self.screen:add(t)self.screen:add(c.Text(c.a.Bottom(),"",{id=r..".posText"}))p.super.createUI(self)end;function p:update(m)local u,v=self.screen.output.getSize()local r=self.screen.id;self.progress=m;if self.src.label~=nil then local w=self.screen:get(r..".nameText")if w~=nil then local x=self.src.label;if d.online then x="info:"..x end;w:update(x)end end;local y=self.screen:get(r..".titleText")local z=self.screen:get(r..".totalBar")local A=self.screen:get(r..".levelBar")local B=self.screen:get(r..".statusText")local C=self.screen:get(r..".posText")y:update(string.format("Quarry: %d x %d (%d)",self.progress.job.left,self.progress.job.forward,self.progress.job.levels))z:update(self.progress.progress.current*100)A:update(self.progress.progress.completedRows)B:update(self.progress.progress.status)local D="pos (%d, %d) e: %d, d: %d"if u<30 then D="(%d,%d) e:%d, d:%d"end;C:update(string.format(D,self.progress.pos.v.x,self.progress.pos.v.z,self.progress.pos.v.y,self.progress.pos.dir))end;function p:updateStatus(n)local r=self.screen.id;local B=self.screen:get(r..".statusText")B:update(n)end;function p:handle(m,o)local r=self.screen.id;if m==d.c.Event.Progress.quarry then self:update(o[1])elseif m==d.c.Event.Turtle.paused then self.paused=true;local t=self.screen:get(r..".pauseButton")t.obj.fillColor=colors.green;t:updateLabel("Go")self.screen:render()elseif m==d.c.Event.Turtle.started then self.paused=false;local s=self.screen:get(r..".haltButton")local t=self.screen:get(r..".pauseButton")s.obj.visible=true;s:updateLabel("Stop")t.obj.visible=true;t.obj.fillColor=colors.yellow;t:updateLabel("Pause")self.screen:render()elseif m==d.c.Event.Turtle.exited then local s=self.screen:get(r..".haltButton")local t=self.screen:get(r..".pauseButton")s.obj.visible=false;t.obj.visible=false;self.screen:render()else self.screen:handle({m,unpack(o)})end end;local function E(j,m,l)a.expect(1,j,"table")a.expect(2,l,"table","nil")a.expect(3,m,"table","nil")local F=l~=nil and m~=nil;if l~=nil then c.h.requireOutput(l)end;local q=h[j.id]local G=false;if F then if q~=nil then if q.progress.name~=m.name or not c.h.isSameScreen(q.screen.output,l)then h[j.id]=nil;q=nil end end;if q==nil then G=true;if m.name==d.c.Event.Progress.quarry then q=p(j,m,l)q:createUI()h[j.id]=q end end end;return q,G end;local function H(l)for I,q in pairs(h)do if c.h.isSameScreen(l,q.screen.output)then return{id=I}end end;return nil end;local function J(j,n)a.expect(1,j,"table")a.expect(2,n,"string")local q=E(j)if q~=nil then q:updateStatus(n)end end;local function K(j,m,l)a.expect(1,j,"table")a.expect(2,m,"table")a.expect(3,l,"table","nil")if l==nil then l=term else c.h.requireOutput(l)end;local q,G=E(j,m,l)if q~=nil and not G then q:update(m)end end;local function L(j,m,o)local M=nil;if c.c.l.Events.UI[m]then local N=f.split(o[1].objId,".")if N[1]=="screen"then M={id=tonumber(N[2])}end elseif c.c.l.Events.Terminal[m]then M=H(term)elseif c.c.l.Events.Monitor[m]then M=H(peripheral.wrap(o[1]))end;if M~=nil then j=M end;local q,G=E(j)if q~=nil then q:handle(m,o)end end;g.updateStatus=J;g.print=K;g.handle=L;return g
