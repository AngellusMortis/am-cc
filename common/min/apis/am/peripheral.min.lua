local a=require("cc.expect")local b=require("am.core")local c={}local d={}local e=60;local f=e*60;local g={}local h=0;local function i()local j=peripheral.find("modem",function(k,l)return not l.isWireless()end)if j==nil then return nil end;return j.getNameLocal()end;local function m()h=os.clock()end;local function n()return g end;local function o(p)local q=p.name;if p.nbt~=nil then q=q..":"..p.nbt end;return q end;local function r(s)local t=os.clock()local u=math.max(h,t-f)local v=t-u;local w=60;if v<f then w=v/e end;local x=false;local y={[t]={}}local z={}if s~=nil then for k,A in pairs(s)do x=true;if A.count>0 then local q=o(A)y[t][q]=b.copy(A)z[q]=b.copy(A)end end end;if not x then y={}end;for B,C in pairs(d)do if B>=u then y[B]=b.copy(C)for k,D in pairs(C)do local q=o(D)local E=z[q]if E==nil then E=b.copy(D)else E.count=E.count+D.count end;z[q]=E end end end;g={}for k,E in pairs(z)do local p=b.copy(E)p.count=0;g[#g+1]={item=p,rate=E.count/w}end;d=y end;local function F(G)local s={}for k,p in ipairs(G)do local q=o(p)local A=s[q]if A==nil then A=b.copy(p)else A.count=A.count+p.count end;s[q]=A end;r(s)end;local function H(I,J,A,K,L)a.expect(1,I,"string")a.expect(2,J,"string")a.expect(3,A,"number","nil")a.expect(4,K,"number","nil")a.expect(5,L,"number","nil")if A~=nil then a.range(A,0,64)end;if A==0 then return false end;if K~=nil then local M=16;if J~=i()then M=peripheral.wrap(J).size()end;a.range(K,1,M)else if J==i()then K=turtle.getSelectedSlot()else local N=peripheral.wrap(J)for O=1,N.size(),1 do if N.getItemDetail(O)==nil then K=O;break end end end end;local P=peripheral.wrap(I)if L~=nil then a.range(L,1,P.size())else for q,k in pairs(P.list())do L=q;break end end;local Q=require("am.log")local R=false;if L~=nil then local S=0;R,S=pcall(function()return P.pushItems(J,L,A,K)end)R=R and S>0 end;return R end;local function T(J,I,A,K,L)a.expect(1,J,"string")a.expect(2,I,"string")a.expect(3,A,"number","nil")a.expect(4,K,"number","nil")a.expect(5,L,"number","nil")if A~=nil then a.range(A,0,64)end;if A==0 then return false end;local N=peripheral.wrap(J)if K~=nil then a.range(K,1,N.size())else for q,k in pairs(N.list())do K=q;break end end;if L~=nil then local M=16;if I~=i()then M=peripheral.wrap(I).size()end;a.range(L,1,M)else if I==i()then L=turtle.getSelectedSlot()else local P=peripheral.wrap(I)for O=1,P.size(),1 do if P.getItemDetail(O)==nil then L=O;break end end end end;local R=false;if L~=nil then local S=0;R,S=pcall(function()return N.pullItems(I,L,A,K)end)R=R and S>0 end;return R end;local function U()local V={}for k,W in ipairs(peripheral.getNames())do if peripheral.getType(W)=="monitor"then V[#V+1]=W end end;return V end;local function X()local V={}for k,W in ipairs(peripheral.getNames())do if peripheral.getType(W)=="monitor"then V[W]=true end end;return V end;local function Y()local Z={}for k,W in ipairs(peripheral.getNames())do if peripheral.hasType(W,"inventory")then Z[#Z+1]=W end end;return Z end;local function _()local Z={}for k,W in ipairs(peripheral.getNames())do if peripheral.hasType(W,"inventory")then Z[W]=true end end;return Z end;c.getItemIdentifer=o;c.setStartTime=m;c.getRates=n;c.getLocalName=i;c.addItems=F;c.calculateRates=r;c.pullItem=H;c.pushItem=T;c.getMonitorNames=U;c.getMonitorLookup=X;c.getInventoryNames=Y;c.getInventoryLookup=_;return c
