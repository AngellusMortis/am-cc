local a=require("cc.expect")local b=require("am.core")local c={}local d={}local e=60;local f=e*60;local g={}local h=0;local function i()local j=peripheral.find("modem",function(k,l)return not l.isWireless()end)if j==nil then return nil end;return j.getNameLocal()end;local function m()h=os.clock()end;local function n()return g end;local function o(p)local q=os.clock()local r=math.max(h,q-f)local s=q-r;local t=60;if s<f then t=s/e end;local u=false;local v={[q]={}}local w={}if p~=nil then for k,x in pairs(p)do u=true;if x.count>0 then v[q][x.name]=b.copy(x)w[x.name]=b.copy(x)end end end;if not u then v={}end;for y,z in pairs(d)do if y>=r then v[y]=b.copy(z)for k,A in pairs(z)do local B=w[A.name]if B==nil then B=b.copy(A)else B.count=B.count+A.count end;w[A.name]=B end end end;g={}for k,B in pairs(w)do local C=b.copy(B)C.count=0;g[#g+1]={item=C,rate=B.count/t}end;d=v end;local function D(E)local p={}for k,C in ipairs(E.items)do local x=p[C.name]if x==nil then x=b.copy(C)else x.count=x.count+C.count end;p[C.name]=x end;o(p)end;local function F(G,H,x,I,J)a.expect(1,G,"string")a.expect(2,H,"string")a.expect(3,x,"number","nil")a.expect(4,I,"number","nil")a.expect(5,J,"number","nil")if x~=nil then a.range(x,0,64)end;if x==0 then return false end;if I~=nil then local K=16;if H~=i()then K=peripheral.wrap(H).size()end;a.range(I,1,K)else if H==i()then I=turtle.getSelectedSlot()else local L=peripheral.wrap(H)for M=1,L.size(),1 do if L.getItemDetail(M)==nil then I=M;break end end end end;local N=peripheral.wrap(G)if J~=nil then a.range(J,1,N.size())else for O,k in pairs(N.list())do J=O;break end end;local P=false;if J~=nil then P=pcall(function()N.pushItems(H,J,x,I)end)end;return P end;local function Q(H,G,x,I,J)a.expect(1,H,"string")a.expect(2,G,"string")a.expect(3,x,"number","nil")a.expect(4,I,"number","nil")a.expect(5,J,"number","nil")if x~=nil then a.range(x,0,64)end;if x==0 then return false end;local L=peripheral.wrap(H)if I~=nil then a.range(I,1,L.size())else for O,k in pairs(L.list())do I=O;break end end;if J~=nil then local K=16;if G~=i()then K=peripheral.wrap(G).size()end;a.range(J,1,K)else if G==i()then J=turtle.getSelectedSlot()else local N=peripheral.wrap(G)for M=1,N.size(),1 do if N.getItemDetail(M)==nil then J=M;break end end end end;local P=false;if J~=nil then P=pcall(function()L.pullItems(G,J,x,I)end)end;return P end;local function R()local S={}for k,T in ipairs(peripheral.getNames())do if peripheral.getType(T)=="monitor"then S[#S+1]=T end end;return S end;local function U()local S={}for k,T in ipairs(peripheral.getNames())do if peripheral.getType(T)=="monitor"then S[T]=true end end;return S end;local function V()local W={}for k,T in ipairs(peripheral.getNames())do if peripheral.hasType(T,"inventory")then W[#W+1]=T end end;return W end;local function X()local W={}for k,T in ipairs(peripheral.getNames())do if peripheral.hasType(T,"inventory")then W[T]=true end end;return W end;c.setStartTime=m;c.getRates=n;c.getLocalName=i;c.addItems=D;c.calculateRates=o;c.pullItem=F;c.pushItem=Q;c.getMonitorNames=R;c.getMonitorLookup=U;c.getInventoryNames=V;c.getInventoryLookup=X;return c
