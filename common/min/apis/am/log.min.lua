local a=require("cc.expect")local b=require("cc.pretty")require(settings.get("ghu.base").."core/apis/ghu")local c=require("am.core")local d={}local e={}e.file={name="log.file",default=nil}e.print={name="log.print",default=true,type="boolean"}d.s=c.makeSettingWrapper(e)local function f(g)return b.render(b.group(b.pretty(g)))end;local function h(g,i,j,k)a.expect(2,i,"boolean","nil")a.expect(3,j,"boolean","nil")a.expect(4,k,"number","nil")if i==nil then if type(g)=="string"then i=false else i=true end end;if j==nil then j=false end;if i then g=b.group(b.pretty(g))end;local l=d.s.file.get()if l~=nil then local m=fs.open(l,"a")if i then m.writeLine(b.render(g))else m.writeLine(g)end;m.close()end;if j or not d.s.print.get()then return end;local n=nil;if k~=nil then n=term.getTextColor()term.setTextColor(k)end;if i then b.print(g)else print(g)end;if k~=nil then term.setTextColor(n)end end;local function o(g,i)h(g,i,false,colors.red)end;local function p(g,i)h(g,i,false,colors.yellow)end;local function q(g,i)h(g,i,false)end;local function r(g,i)h(g,i,true)end;d.format=f;d.info=q;d.warning=p;d.error=o;d.debug=r;return d
