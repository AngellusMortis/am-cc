local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.event")local c=require("am.progress.helpers")local d=require("am.log")local e=require("am.ui")local f=require("am.progress.base")local g=f:extend("am.progress.QuarryWrapper")function g:init(h,i,j,k)g.super.init(self,h,i,j,k)self.completed=false;self.paused=false;self.names[i.name]=true;self.needsUpdate={progress=true,items=true}return self end;function g:createProgressFrame(l)local m=self;local n=l:getTab("progress")local o=self:getBaseId()local p=e.Button(e.a.Center(8),"\x17",{id=o..".itemsButton",fillColor=colors.blue})p:addActivateHandler(function()local q,r=m.output.getSize()local s=r<=12 and 1 or 2;m:updateItemsTab(l:bind(m.output),r-s)l:setActive(m.output,"items")local t=n:get(o..".haltButton",m.output)local u=n:get(o..".pauseButton",m.output)if m.completed then t.visible=false;u.visible=false end end)n:add(p)n:add(e.ProgressBar(e.a.TopLeft(),{id=o..".totalBar",label="Total",displayTotal=self.progress.job.levels,fillColor=colors.lightGray}))n:add(e.ProgressBar(e.a.Left(4),{id=o..".levelBar",label="Level",total=1,fillColor=colors.lightGray}))n:add(e.Text(e.a.Center(7),"",{id=o..".statusText"}))local t=e.Button(e.a.Center(8,e.c.Offset.Left,2),"\x8f",{id=o..".haltButton",fillColor=colors.red})t:addActivateHandler(function()d.info(string.format("Halting %s...",self.src.label))b.TurtleRequestHaltEvent(self.src.id):send()end)n:add(t)local u=e.Button(e.a.Center(8,e.c.Offset.Right,2),"\x95\x95",{id=o..".pauseButton",fillColor=colors.yellow})u:addActivateHandler(function()if m.paused then d.info(string.format("Continuing %s...",self.src.label))b.TurtleRequestContinueEvent(self.src.id):send()else d.info(string.format("Pausing %s...",self.src.label))b.TurtleRequestPauseEvent(self.src.id):send()end end)n:add(u)n:add(e.Text(e.a.Bottom(),"",{id=o..".posText"}))n:setVisible(true)end;function g:createItemsFrame(l,r)local m=self;local o=self:getBaseId()local v=l:createTab("items")v.fillHorizontal=true;v.fillVertical=true;v.border=0;v.fillColor=colors.black;v.textColor=colors.white;v:add(e.Text(e.a.TopLeft(),"Mined Items",{id=o..".itemsTitle"}))local w=e.Button(e.a.TopRight(),"x",{id=o..".closeItemsButton",fillColor=colors.red,border=0})w:addActivateHandler(function()m:updateProgressTab(l:bind(m.output))l:setActive(m.output,"progress")end)v:add(w)local x=e.Frame(e.a.Anchor(1,2),{id=o..".itemsListFrame",fillHorizontal=true,border=0,padLeft=1,padTop=1,fillColor=colors.lightGray,textColor=colors.black,scrollBar=true,height=r})x:add(e.Text(e.a.TopLeft(),{},{id=o..".itemListText"}))v:add(x)v:setVisible(false)end;function g:createUI()local o=self:getBaseId()local s=2;local y=e.Text(e.a.Top(),"",{id=o..".nameText"})local q,r=self.output.getSize()if r<=12 then s=1;y.visible=false end;if _G.PROGRESS_SHOW_CLOSE then local z=e.Button(e.a.TopRight(),"x",{id=o..".closeButton",fillColor=colors.red,border=0})z:addActivateHandler(function()_G.RUN_PROGRESS=false end)self.frame:add(z)end;self.frame:add(y)self.frame:add(e.Text(e.a.Center(s),"",{id=o..".titleText"}))local l=e.TabbedFrame(e.a.Anchor(1,s+1),{id=o..".mainFrame",fillHorizontal=true,fillVertical=true,border=0,fillColor=colors.black,textColor=colors.white,primaryTabId="progress"})self:createProgressFrame(l)self:createItemsFrame(l,r-s)l:setActive(self.output,"progress")self.frame:add(l)g.super.createUI(self)end;function g:updateProgressTab(A)if not self.needsUpdate.progress then return end;local o=self:getBaseId()local n=A:getTab("progress")local B=n:get(o..".totalBar")local C=n:get(o..".levelBar")local D=n:get(o..".statusText")B.obj.displayTotal=self.progress.job.levels;B:update(self.progress.progress.current*100)if self.progress.progress.hitBedrock then B:updateLabel("Total (Bedrock)")else B:updateLabel("Total")end;if self.progress.job.left~=nil then C.obj.total=self.progress.job.left end;C:update(self.progress.progress.completedRows)D:update(self.progress.progress.status)self:updatePosition(self.src,self.progress.pos)self.needsUpdate.progress=false end;function g:updateItemsTab(A,E)if not self.needsUpdate.items then return end;local o=self:getBaseId()local v=A:getTab("items")local x=v:get(o..".itemsListFrame")local F=v:get(o..".itemListText")local G=c.itemStrings(self.progress.progress.items)x.obj.height=math.max(E,#G+2)F:update(G)self.needsUpdate.items=false end;function g:update(h,H,I)if H~=nil then self.progress=H;self.needsUpdate={progress=true,items=true}end;if not self.frame.visible and not I then return end;local q,r=self.output.getSize()local o=self:getBaseId()local y=self.frame:get(o..".nameText",self.output)local J=self.frame:get(o..".titleText",self.output)if self.src.label~=nil then local K=self.src.label;if b.online then K="info:"..K end;y:update(K)end;local s=1;if r<=12 then y.obj.visible=false else s=2;y.obj.visible=self.frame.visible end;local L=""J.obj.anchor.y=s;if self.progress.job.left~=nil and self.progress.job.forward~=nil then L=string.format(": %d x %d (%d)",self.progress.job.left,self.progress.job.forward,self.progress.job.levels)end;J:update(string.format("Quarry%s",L))local A=self.frame:get(o..".mainFrame",self.output)A.obj.anchor.y=s+1;local M=A.obj.tabIndexIdMap[A.obj.active]if M=="progress"then self:updateProgressTab(A)elseif M=="items"then self:updateItemsTab(A,r-s)end end;function f:updatePosition(h,N)self.progress.pos=N;local O,q=self.output.getSize()local o=self:getBaseId()local P=self.frame:get(o..".posText",self.output)local Q="pos (%d, %d) e: %d, d: %d"if O<30 then Q="(%d,%d) e:%d, d:%d"end;P:update(string.format(Q,N.v.x,N.v.z,N.v.y,N.dir))end;function g:updateStatus(h,R)self.progress.progress.status=R;local o=self:getBaseId()local D=self.frame:get(o..".statusText",self.output)D:update(R)end;function g:handle(h,H,S)local o=self:getBaseId()if H==b.c.Event.Progress.quarry then self:update(h,S[1])else local l=self.frame:get(o..".mainFrame",self.output)local T=l.obj.active==1;local n=l:getTab("progress")local t=n:get(o..".haltButton")local u=n:get(o..".pauseButton")if H==b.c.Event.Turtle.paused then self.paused=true;self.completed=false;u.obj.fillColor=colors.green;u:updateLabel("\x10")if T then l:render()end elseif H==b.c.Event.Turtle.started then self.paused=false;self.completed=false;t.obj.visible=T and true or false;t:updateLabel("\x8f")u.obj.visible=T and true or false;u.obj.fillColor=colors.yellow;u:updateLabel("\x95\x95")if T then l:render()end elseif H==b.c.Event.Turtle.exited then self.completed=true;self.paused=false;t.obj.visible=false;u.obj.visible=false;if T then l:render()end else self.frame:handle(self.output,{H,table.unpack(S)})end end end;return g
