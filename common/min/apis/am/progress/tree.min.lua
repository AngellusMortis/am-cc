require(settings.get("ghu.base").."core/apis/ghu")local a=require("am.ui")local b=require("am.event")local c=require("am.log")local d=require("ext.object")local e=require("am.progress.base")local f=e:extend("am.progress.CollectWrapper")function f:init(g,h,i,j)f.super.init(self,g,{[g.id]=h},i,j)self.src_map={[g.id]=g}self.position=nil;self.paused=false;self.names={[b.c.Event.Progress.collect]=true,[b.c.Event.Progress.tree]=true}return self end;function f:getEvent()local k=0;local l=nil;for m,n in pairs(self.progress)do k=k+1;l=n end;return l,k end;function f:isTree(l,k)if k==nil then l,k=self:getEvent()end;return k==1 and l~=nil and l.name==b.c.Event.Progress.tree end;function f:getTitle()local l,k=self:getEvent()if self:isTree(l,k)then local o=""if#l.trees>0 then o=string.format(" (%d)",#l.trees)end;return string.format("Tree%s",o)end;return"Collect"end;function f:getStatus()local p={}for q,l in pairs(self.progress)do if l.name==b.c.Event.Progress.tree then p[#p+1]={label=self.src_map[q].label or q,status=l.status}else p[#p+1]={label=self.src_map[q].label or q,status=""}end end;return p end;function f:getItems()local r={}for m,l in pairs(self.progress)do for m,s in ipairs(l.rates)do if r[s.item.name]==nil then r[s.item.name]=s else local t=r[s.item.name]t.rate=t.rate+s.rate;r[s.item.name]=t end end end;local u={}for m,v in pairs(r)do u[#u+1]=string.format("%.1f %s/min",v.rate,v.item.displayName)end;return u end;function f:createUI()local w=self:getBaseId()local x=self;local y=2;local z=a.Text(a.a.Top(),"",{id=w..".nameText"})local m,A=self.output.getSize()if A<=12 then y=1;z.visible=false end;if _G.PROGRESS_SHOW_CLOSE then local B=a.Button(a.a.TopRight(),"x",{id=w..".closeButton",fillColor=colors.red,border=0})B:addActivateHandler(function()_G.RUN_PROGRESS=false end)self.frame:add(B)end;self.frame:add(z)self.frame:add(a.Text(a.a.Center(y),"",{id=w..".titleText"}))self.frame:add(a.Text(a.a.Center(y+2),"",{id=w..".rateText"}))self.frame:add(a.Text(a.a.Center(y+4),"",{id=w..".statusText"}))local C=a.Button(a.a.Center(y+5,a.c.Offset.Left,1),"\x8f",{id=w..".haltButton",fillColor=colors.red})C:addActivateHandler(function()c.info(string.format("Halting %s...",self.src.label))b.TurtleRequestHaltEvent(self.src.id):send()end)self.frame:add(C)local D=a.Button(a.a.Center(y+5,a.c.Offset.Right,1),"\x95\x95",{id=w..".pauseButton",fillColor=colors.yellow})D:addActivateHandler(function()if x.paused then c.info(string.format("Continuing %s...",self.src.label))b.TurtleRequestContinueEvent(self.src.id):send()else c.info(string.format("Pausing %s...",self.src.label))b.TurtleRequestPauseEvent(self.src.id):send()end end)self.frame:add(D)self.frame:add(a.Text(a.a.Bottom(),"",{id=w..".posText"}))local l=self:getEvent()self:update(self.src,l)self:render()end;function f:update(g,l)local m,A=self.output.getSize()local w=self:getBaseId()self.src_map[g.id]=g;self.progress[g.id]=l;local z=self.frame:get(w..".nameText",self.output)local E=self.frame:get(w..".titleText",self.output)if self.src.label~=nil then local F=self.src.label;if b.online then F="info:"..F end;z:update(F)end;local y=1;if A<=12 then z.obj.visible=false else y=2;z.obj.visible=self.frame.visible end;E.obj.anchor.y=y;E:update(self:getTitle())local G=self.frame:get(w..".rateText",self.output)local H=self.frame:get(w..".statusText",self.output)G.obj.anchor.y=y+2;G:update(self:getItems())H.obj.anchor.y=y+4;local p=self:getStatus()H:update(p[1].status)local n,k=self:getEvent()if self:isTree(n,k)then self:updatePosition(g,n.pos)else self:updatePosition(g,nil)end end;function e:updatePosition(g,I)self.position=I;local w=self:getBaseId()local J=self.frame:get(w..".posText",self.output)if I==nil then J.visible=false;J:update("")return end;local K,m=self.output.getSize()local L="pos (%d, %d) e: %d, d: %d"if K<30 then L="(%d,%d) e:%d, d:%d"end;J:update(string.format(L,I.v.x,I.v.z,I.v.y,I.dir))end;function f:updateStatus(g,p)local w=self:getBaseId()local H=self.frame:get(w..".statusText",self.output)H:update(p)end;function f:handle(g,l,M)local w=self:getBaseId()local x=self;if l==b.c.Event.Progress.quarry then self:update(g,M[1])else local C=self.frame:get(w..".haltButton",self.output)local D=self.frame:get(w..".pauseButton",self.output)if l==b.c.Event.Turtle.paused then self.paused=true;self.completed=false;D.obj.fillColor=colors.green;D:updateLabel("\x10")self:render()elseif l==b.c.Event.Turtle.started then self.paused=false;self.completed=false;C.obj.visible=x.frame.visible;C:updateLabel("\x8f")D.obj.visible=x.frame.visible;D.obj.fillColor=colors.yellow;D:updateLabel("\x95\x95")self:render()elseif l==b.c.Event.Turtle.exited then self.completed=true;self.paused=false;C.obj.visible=false;D.obj.visible=false;self:render()else self.frame:handle(self.output,{l,table.unpack(M)})end end end;return f
