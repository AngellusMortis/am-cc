local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.ui")local c=require("am.event")local d=require("am.log")local e=require("am.progress.base")local f=e:extend("am.progress.TreeWrapper")function f:init(g,h,i,j)f.super.init(self,g,h,i,j)self.paused=false;self.names[h.name]=true;return self end;function f:createUI()local k=self:getBaseId()local l=self;local m=2;local n=b.Text(b.a.Top(),"",{id=k..".nameText"})local o,p=self.output.getSize()if p<=12 then m=1;n.visible=false end;if _G.RUN_PROGRESS and b.h.isTerm(self.output)then local q=b.Button(b.a.TopRight(),"x",{id=k..".closeButton",fillColor=colors.red,border=0})q:addActivateHandler(function()_G.RUN_PROGRESS=false end)self.frame:add(q)end;self.frame:add(n)self.frame:add(b.Text(b.a.Center(m),"",{id=k..".titleText"}))self.frame:add(b.Text(b.a.Center(m+2),"",{id=k..".rateText"}))self.frame:add(b.Text(b.a.Center(m+4),"",{id=k..".statusText"}))local r=b.Button(b.a.Center(m+5,b.c.Offset.Left,1),"\x8f",{id=k..".haltButton",fillColor=colors.red})r:addActivateHandler(function()d.info(string.format("Halting %s...",self.src.label))c.TurtleRequestHaltEvent(self.src.id):send()end)self.frame:add(r)local s=b.Button(b.a.Center(m+5,b.c.Offset.Right,1),"\x95\x95",{id=k..".pauseButton",fillColor=colors.yellow})s:addActivateHandler(function()if l.paused then d.info(string.format("Continuing %s...",self.src.label))c.TurtleRequestContinueEvent(self.src.id):send()else d.info(string.format("Pausing %s...",self.src.label))c.TurtleRequestPauseEvent(self.src.id):send()end end)self.frame:add(s)self.frame:add(b.Text(b.a.Bottom(),"",{id=k..".posText"}))f.super.createUI(self)end;function f:update(t)local u,p=self.output.getSize()local k=self:getBaseId()self.progress=t;local n=self.frame:get(k..".nameText",self.output)local v=self.frame:get(k..".titleText",self.output)if self.src.label~=nil then local w=self.src.label;if c.online then w="info:"..w end;n:update(w)end;local m=1;if p<=12 then n.obj.visible=false else m=2;n.obj.visible=self.frame.visible end;local x=""v.obj.anchor.y=m;if#self.progress.trees>0 then x=string.format(" (%d)",#self.progress.trees)end;v:update(string.format("Tree%s",x))local y=self.frame:get(k..".rateText",self.output)local z=self.frame:get(k..".statusText",self.output)local A=self.frame:get(k..".posText",self.output)y.obj.anchor.y=m+2;y:update(string.format("%.1f log/min",self.progress.rate))z.obj.anchor.y=m+4;z:update(self.progress.status)local B="pos (%d, %d) e: %d, d: %d"if u<30 then B="(%d,%d) e:%d, d:%d"end;A:update(string.format(B,self.progress.pos.v.x,self.progress.pos.v.z,self.progress.pos.v.y,self.progress.pos.dir))end;function f:updateStatus(C)local k=self:getBaseId()local z=self.frame:get(k..".statusText",self.output)z:update(C)end;function f:handle(t,D)local k=self:getBaseId()local l=self;if t==c.c.Event.Progress.quarry then self:update(D[1])else local r=self.frame:get(k..".haltButton",self.output)local s=self.frame:get(k..".pauseButton",self.output)if t==c.c.Event.Turtle.paused then self.paused=true;self.completed=false;s.obj.fillColor=colors.green;s:updateLabel("\x10")self:render()elseif t==c.c.Event.Turtle.started then self.paused=false;self.completed=false;r.obj.visible=l.frame.visible;r:updateLabel("\x8f")s.obj.visible=l.frame.visible;s.obj.fillColor=colors.yellow;s:updateLabel("\x95\x95")self:render()elseif t==c.c.Event.Turtle.exited then self.completed=true;self.paused=false;r.obj.visible=false;s.obj.visible=false;self:render()else self.frame:handle(self.output,{t,table.unpack(D)})end end end;return f
