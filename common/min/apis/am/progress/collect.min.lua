require(settings.get("ghu.base").."core/apis/ghu")local a=require("am.ui")local b=require("am.event")local c=require("am.log")local d=require("am.progress.base")local e=d:extend("am.progress.CollectWrapper")function e:init(f,g,h,i)e.super.init(self,f,{[f.id]=g},h,i)self.src_map={[f.id]=f}self.position=nil;self.paused=false;self.names={[b.c.Event.Progress.collect]=true,[b.c.Event.Progress.tree]=true}return self end;function e:getEvent()local j=0;local k=nil;for l,m in pairs(self.progress)do j=j+1;k=m end;return k,j end;function e:isTree(k,j)if j==nil then k,j=self:getEvent()end;return j==1 and k~=nil and k.name==b.c.Event.Progress.tree end;function e:getTitle()local k,j=self:getEvent()if self:isTree(k,j)then local n=""if#k.trees>0 then n=string.format(" (%d)",#k.trees)end;return string.format("Tree%s",n)end;return"Collect"end;function e:getStatus()for l,k in pairs(self.progress)do return k.status end;return""end;function e:getItems()local o={}for l,k in pairs(self.progress)do for l,p in ipairs(k.rates)do if o[p.item.name]==nil then o[p.item.name]=p else local q=o[p.item.name]q.rate=q.rate+p.rate;o[p.item.name]=q end end end;local r={}for l,s in pairs(o)do r[#r+1]=string.format("%.1f %s/min",s.rate,s.item.displayName)end;return r end;function e:createUI()local t=self:getBaseId()local u=self;local v=2;local w=a.Text(a.a.Top(),"",{id=t..".nameText"})local l,x=self.output.getSize()if x<=12 then v=1;w.visible=false end;if _G.PROGRESS_SHOW_CLOSE then local y=a.Button(a.a.TopRight(),"x",{id=t..".closeButton",fillColor=colors.red,border=0})y:addActivateHandler(function()_G.RUN_PROGRESS=false end)self.frame:add(y)end;self.frame:add(w)self.frame:add(a.Text(a.a.Center(v),"",{id=t..".titleText"}))self.frame:add(a.Text(a.a.Center(v+2),"",{id=t..".rateText"}))self.frame:add(a.Text(a.a.Center(v+4),"",{id=t..".statusText"}))local z=a.Button(a.a.Center(v+5,a.c.Offset.Left,1),"\x8f",{id=t..".haltButton",fillColor=colors.red})z:addActivateHandler(function()c.info(string.format("Halting %s...",self.src.label))b.TurtleRequestHaltEvent(self.src.id):send()end)self.frame:add(z)local A=a.Button(a.a.Center(v+5,a.c.Offset.Right,1),"\x95\x95",{id=t..".pauseButton",fillColor=colors.yellow})A:addActivateHandler(function()if u.paused then c.info(string.format("Continuing %s...",self.src.label))b.TurtleRequestContinueEvent(self.src.id):send()else c.info(string.format("Pausing %s...",self.src.label))b.TurtleRequestPauseEvent(self.src.id):send()end end)self.frame:add(A)self.frame:add(a.Text(a.a.Bottom(),"",{id=t..".posText"}))local k=self:getEvent()self:update(self.src,k)self:render()end;function e:update(f,k)local l,x=self.output.getSize()local t=self:getBaseId()self.src_map[f.id]=f;self.progress[f.id]=k;local w=self.frame:get(t..".nameText",self.output)local B=self.frame:get(t..".titleText",self.output)if self.src.label~=nil then local C=self.src.label;if b.online then C="info:"..C end;w:update(C)end;local v=1;if x<=12 then w.obj.visible=false else v=2;w.obj.visible=self.frame.visible end;B.obj.anchor.y=v;B:update(self:getTitle())local D=false;local E=self.frame:get(t..".rateText",self.output)local F=self.frame:get(t..".statusText",self.output)E.obj.anchor.y=v+2;local o=self:getItems()E:update(o)local G=#o;if G==0 then G=1 end;local H=v+G;if F.obj.anchor.y~=H+3 then D=true end;F.obj.anchor.y=H+3;F:update(self:getStatus())local z=self.frame:get(t..".haltButton",self.output)local A=self.frame:get(t..".pauseButton",self.output)z.obj.anchor.y=H+4;A.obj.anchor.y=H+4;local m,j=self:getEvent()if self:isTree(m,j)then self:updatePosition(f,m.pos)else self:updatePosition(f,nil)end;if D then self.output.clear()self.frame:render(self.output)end end;function d:updatePosition(f,I)self.position=I;local t=self:getBaseId()local J=self.frame:get(t..".posText",self.output)if I==nil then J.visible=false;J:update("")return end;local K,l=self.output.getSize()local L="pos (%d, %d) e: %d, d: %d"if K<30 then L="(%d,%d) e:%d, d:%d"end;J:update(string.format(L,I.v.x,I.v.z,I.v.y,I.dir))end;function e:updateStatus(f,M)local t=self:getBaseId()local F=self.frame:get(t..".statusText",self.output)F:update(M)end;function e:handle(f,k,N)local t=self:getBaseId()local u=self;if k==b.c.Event.Progress.quarry then self:update(f,N[1])else local z=self.frame:get(t..".haltButton",self.output)local A=self.frame:get(t..".pauseButton",self.output)if k==b.c.Event.Turtle.paused then self.paused=true;self.completed=false;A.obj.fillColor=colors.green;A:updateLabel("\x10")self:render()elseif k==b.c.Event.Turtle.started then self.paused=false;self.completed=false;z.obj.visible=u.frame.visible;z:updateLabel("\x8f")A.obj.visible=u.frame.visible;A.obj.fillColor=colors.yellow;A:updateLabel("\x95\x95")self:render()elseif k==b.c.Event.Turtle.exited then self.completed=true;self.paused=false;z.obj.visible=false;A.obj.visible=false;self:render()else self.frame:handle(self.output,{k,table.unpack(N)})end end end;return e
