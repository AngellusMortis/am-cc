require(settings.get("ghu.base").."core/apis/ghu")local a=require("am.ui")local b=require("am.event")local c=require("am.log")local d=require("am.progress.base")local e=d:extend("am.progress.CollectWrapper")function e:init(f,g,h,i)e.super.init(self,f,{[f.id]=g},h,i)self.src_map={[f.id]=f}self.position=nil;self.paused=false;self.names={[b.c.Event.Progress.collect]=true,[b.c.Event.Progress.tree]=true}return self end;function e:getEvent()local j=0;local k=nil;for l,m in pairs(self.progress)do j=j+1;k=m end;return k,j end;function e:isTree(k,j)if j==nil then k,j=self:getEvent()end;return j==1 and k~=nil and k.name==b.c.Event.Progress.tree end;function e:getTitle()local k,j=self:getEvent()if self:isTree(k,j)then local n=""if#k.trees>0 then n=string.format(" (%d)",#k.trees)end;return string.format("Tree%s",n)end;return"Collect"end;function e:getStatus()local o={}for p,k in pairs(self.progress)do if k.name==b.c.Event.Progress.tree then o[#o+1]={label=self.src_map[p].label or p,status=k.status}else o[#o+1]={label=self.src_map[p].label or p,status=""}end end;return o end;function e:getItems()local q={}for l,k in pairs(self.progress)do for l,r in ipairs(k.rates)do if q[r.item.name]==nil then q[r.item.name]=r else local s=q[r.item.name]s.rate=s.rate+r.rate;q[r.item.name]=s end end end;local t={}for l,u in pairs(q)do t[#t+1]=string.format("%.1f %s/min",u.rate,u.item.displayName)end;return t end;function e:createUI()local v=self:getBaseId()local w=self;local x=2;local y=a.Text(a.a.Top(),"",{id=v..".nameText"})local l,z=self.output.getSize()if z<=12 then x=1;y.visible=false end;if _G.PROGRESS_SHOW_CLOSE then local A=a.Button(a.a.TopRight(),"x",{id=v..".closeButton",fillColor=colors.red,border=0})A:addActivateHandler(function()_G.RUN_PROGRESS=false end)self.frame:add(A)end;self.frame:add(y)self.frame:add(a.Text(a.a.Center(x),"",{id=v..".titleText"}))self.frame:add(a.Text(a.a.Center(x+2),"",{id=v..".rateText"}))self.frame:add(a.Text(a.a.Center(x+4),"",{id=v..".statusText"}))local B=a.Button(a.a.Center(x+5,a.c.Offset.Left,1),"\x8f",{id=v..".haltButton",fillColor=colors.red})B:addActivateHandler(function()c.info(string.format("Halting %s...",self.src.label))b.TurtleRequestHaltEvent(self.src.id):send()end)self.frame:add(B)local C=a.Button(a.a.Center(x+5,a.c.Offset.Right,1),"\x95\x95",{id=v..".pauseButton",fillColor=colors.yellow})C:addActivateHandler(function()if w.paused then c.info(string.format("Continuing %s...",self.src.label))b.TurtleRequestContinueEvent(self.src.id):send()else c.info(string.format("Pausing %s...",self.src.label))b.TurtleRequestPauseEvent(self.src.id):send()end end)self.frame:add(C)self.frame:add(a.Text(a.a.Bottom(),"",{id=v..".posText"}))local k=self:getEvent()self:update(self.src,k)self:render()end;function e:update(f,k)local l,z=self.output.getSize()local v=self:getBaseId()self.src_map[f.id]=f;self.progress[f.id]=k;local y=self.frame:get(v..".nameText",self.output)local D=self.frame:get(v..".titleText",self.output)if self.src.label~=nil then local E=self.src.label;if b.online then E="info:"..E end;y:update(E)end;local x=1;if z<=12 then y.obj.visible=false else x=2;y.obj.visible=self.frame.visible end;D.obj.anchor.y=x;D:update(self:getTitle())local F=self.frame:get(v..".rateText",self.output)local G=self.frame:get(v..".statusText",self.output)F.obj.anchor.y=x+2;F:update(self:getItems())G.obj.anchor.y=x+4;local o=self:getStatus()G:update(o[1].status)local m,j=self:getEvent()if self:isTree(m,j)then self:updatePosition(f,m.pos)else self:updatePosition(f,nil)end end;function d:updatePosition(f,H)self.position=H;local v=self:getBaseId()local I=self.frame:get(v..".posText",self.output)if H==nil then I.visible=false;I:update("")return end;local J,l=self.output.getSize()local K="pos (%d, %d) e: %d, d: %d"if J<30 then K="(%d,%d) e:%d, d:%d"end;I:update(string.format(K,H.v.x,H.v.z,H.v.y,H.dir))end;function e:updateStatus(f,o)local v=self:getBaseId()local G=self.frame:get(v..".statusText",self.output)G:update(o)end;function e:handle(f,k,L)local v=self:getBaseId()local w=self;if k==b.c.Event.Progress.quarry then self:update(f,L[1])else local B=self.frame:get(v..".haltButton",self.output)local C=self.frame:get(v..".pauseButton",self.output)if k==b.c.Event.Turtle.paused then self.paused=true;self.completed=false;C.obj.fillColor=colors.green;C:updateLabel("\x10")self:render()elseif k==b.c.Event.Turtle.started then self.paused=false;self.completed=false;B.obj.visible=w.frame.visible;B:updateLabel("\x8f")C.obj.visible=w.frame.visible;C.obj.fillColor=colors.yellow;C:updateLabel("\x95\x95")self:render()elseif k==b.c.Event.Turtle.exited then self.completed=true;self.paused=false;B.obj.visible=false;C.obj.visible=false;self:render()else self.frame:handle(self.output,{k,table.unpack(L)})end end end;return e
