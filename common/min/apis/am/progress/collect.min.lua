require(settings.get("ghu.base").."core/apis/ghu")local a=require("am.ui")local b=require("am.event")local c=require("am.log")local d=require("am.helpers")local e=require("am.progress.base")local f=e:extend("am.progress.CollectWrapper")function f:init(g,h,i,j)f.super.init(self,g,{[g.id]=h},i,j)self.src_map={[g.id]=g}self.position=nil;self.paused=false;self.names={[b.c.Event.Progress.collect]=true,[b.c.Event.Progress.tree]=true}return self end;function f:getEvent()local k=0;local l=nil;for m,n in pairs(self.progress)do k=k+1;l=n end;return l,k end;function f:isTree(l,k)if k==nil then l,k=self:getEvent()end;return k==1 and l~=nil and l.name==b.c.Event.Progress.tree end;function f:getTitle()local l,k=self:getEvent()if self:isTree(l,k)then local o=""if#l.trees>0 then o=string.format(" (%d)",#l.trees)end;return string.format("Tree%s",o)end;return"Collect"end;function f:getStatus()for m,l in pairs(self.progress)do return l.status end;return""end;function f:getItems()local p={}for m,l in pairs(self.progress)do for m,q in ipairs(l.rates)do if p[q.item.name]==nil then p[q.item.name]=q else local r=p[q.item.name]r.rate=r.rate+q.rate;p[q.item.name]=r end end end;local s={}for m,t in pairs(p)do s[#s+1]=t end;d.sortItemsByCount(s,false)local u={}for m,t in ipairs(s)do local q=d.metricString(t.rate)u[#u+1]=string.format("%5s %s/min",q,t.item.displayName)end;return u end;function f:createUI()local v=self:getBaseId()local w=self;local x=2;local y=a.Text(a.a.Top(),"",{id=v..".nameText"})local m,z=self.output.getSize()if z<=12 then x=1;y.visible=false end;if _G.PROGRESS_SHOW_CLOSE then local A=a.Button(a.a.TopRight(),"x",{id=v..".closeButton",fillColor=colors.red,border=0})A:addActivateHandler(function()_G.RUN_PROGRESS=false end)self.frame:add(A)end;self.frame:add(y)self.frame:add(a.Text(a.a.Center(x),"",{id=v..".titleText"}))self.frame:add(a.Text(a.a.Center(x+2),"",{id=v..".rateText"}))self.frame:add(a.Text(a.a.Center(x+4),"",{id=v..".statusText"}))local B=a.Button(a.a.Center(x+5,a.c.Offset.Left,1),"\x8f",{id=v..".haltButton",fillColor=colors.red})B:addActivateHandler(function()c.info(string.format("Halting %s...",self.src.label))b.TurtleRequestHaltEvent(self.src.id):send()end)self.frame:add(B)local C=a.Button(a.a.Center(x+5,a.c.Offset.Right,1),"\x95\x95",{id=v..".pauseButton",fillColor=colors.yellow})C:addActivateHandler(function()if w.paused then c.info(string.format("Continuing %s...",self.src.label))b.TurtleRequestContinueEvent(self.src.id):send()else c.info(string.format("Pausing %s...",self.src.label))b.TurtleRequestPauseEvent(self.src.id):send()end end)self.frame:add(C)self.frame:add(a.Text(a.a.Bottom(),"",{id=v..".posText"}))local l=self:getEvent()self:update(self.src,l)self:render()end;function f:update(g,l)local m,z=self.output.getSize()local v=self:getBaseId()self.src_map[g.id]=g;self.progress[g.id]=l;local y=self.frame:get(v..".nameText",self.output)local D=self.frame:get(v..".titleText",self.output)if self.src.label~=nil then local E=self.src.label;if b.online then E="info:"..E end;y:update(E)end;local x=1;if z<=12 then y.obj.visible=false else x=2;y.obj.visible=self.frame.visible end;D.obj.anchor.y=x;D:update(self:getTitle())local F=false;local G=self.frame:get(v..".rateText",self.output)local H=self.frame:get(v..".statusText",self.output)G.obj.anchor.y=x+2;local p=self:getItems()G:update(p)local I=#p;if I==0 then I=1 end;local J=x+I;if H.obj.anchor.y~=J+3 then F=true end;H.obj.anchor.y=J+3;H:update(self:getStatus())local B=self.frame:get(v..".haltButton",self.output)local C=self.frame:get(v..".pauseButton",self.output)B.obj.anchor.y=J+4;C.obj.anchor.y=J+4;local n,k=self:getEvent()if self:isTree(n,k)then self:updatePosition(g,n.pos)else self:updatePosition(g,nil)end;if F then self.output.clear()self.frame:render(self.output)end end;function e:updatePosition(g,K)self.position=K;local v=self:getBaseId()local L=self.frame:get(v..".posText",self.output)if K==nil then L.visible=false;L:update("")return end;local M,m=self.output.getSize()local N="pos (%d, %d) e: %d, d: %d"if M<30 then N="(%d,%d) e:%d, d:%d"end;L:update(string.format(N,K.v.x,K.v.z,K.v.y,K.dir))end;function f:updateStatus(g,O)local v=self:getBaseId()local H=self.frame:get(v..".statusText",self.output)H:update(O)end;function f:handle(g,l,P)local v=self:getBaseId()local w=self;if l==b.c.Event.Progress.quarry then self:update(g,P[1])else local B=self.frame:get(v..".haltButton",self.output)local C=self.frame:get(v..".pauseButton",self.output)if l==b.c.Event.Turtle.paused then self.paused=true;self.completed=false;C.obj.fillColor=colors.green;C:updateLabel("\x10")self:render()elseif l==b.c.Event.Turtle.started then self.paused=false;self.completed=false;B.obj.visible=w.frame.visible;B:updateLabel("\x8f")C.obj.visible=w.frame.visible;C.obj.fillColor=colors.yellow;C:updateLabel("\x95\x95")self:render()elseif l==b.c.Event.Turtle.exited then self.completed=true;self.paused=false;B.obj.visible=false;C.obj.visible=false;self:render()else self.frame:handle(self.output,{l,table.unpack(P)})end end end;return f
