local a=require("cc.expect")local b=require("ext.object")local function c(d,e)return d.count<e.count end;local function f(d,e)if d.rate~=nil then return d.rate>e.rate end;return d.count>e.count end;local function g(d,e)if d.item~=nil then return d.item.displayName:lower()>e.item.displayName:lower()end;return d.displayName:lower()<e.displayName:lower()end;local function h(d,e)return d.displayName:lower()>e.displayName:lower()end;local function i(j,k)if k==nil then k=false end;if k then table.sort(j,c)else table.sort(j,f)end end;local function l(j,k)if k==nil then k=false end;if k then table.sort(j,g)else table.sort(j,h)end end;local m={"K","M","T","P"}local function n(o)local p=0;while o>1000 do o=o/1000;p=p+1 end;local q=""if p>0 then q=m[p]end;return string.format("%.1f%s",o,q)end;local function r(s)return s.normalize~=nil and s.x~=nil and s.y~=nil and s.z~=nil end;local function t(u,s)a.expect(1,u,"number")if not r(s)then local v=type(s)local w;local x,y=pcall(debug.getinfo,3,"nS")if x and y.name and y.name~=""and y.what~="C"then w=y.name end;if w then error(("bad argument #%d to '%s' (expected Vector, got %s)"):format(u,w,v),3)else error(("bad argument #%d (expected Vector, got %s)"):format(u,v),3)end end end;local function z(s)local A=require("am.log")return b.has(s,"am.p.TurtlePosition")end;local function B(u,s)a.expect(1,u,"number")if not z(s)then local v=type(s)local w;local x,y=pcall(debug.getinfo,3,"nS")if x and y.name and y.name~=""and y.what~="C"then w=y.name end;if w then error(("bad argument #%d to '%s' (expected TurtlePosition, got %s)"):format(u,w,v),3)else error(("bad argument #%d (expected TurtlePosition, got %s)"):format(u,v),3)end end end;local function C(D)return z(D)and D.v.x==0 and D.v.y==0 and D.v.z==0 end;local E={}E.isVector=r;E.requireVector=t;E.isPosition=z;E.requirePosition=B;E.isOrigin=C;E.metricString=n;E.sortItemsByCount=i;E.sortItemsByName=l;return E
