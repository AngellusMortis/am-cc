local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.ui")local c=require("am.event")local d=require("am.core")local e=require("am.progress.helpers")local f=require("am.progress.quarry")local g=require("am.progress.tree")local h=require("am.progress.colonies")local i={}local j={}local k=nil;local function l(m,n)if not n then return b.Frame(b.a.Anchor(1,1),{id=string.format("main.1.%d",m.id),fillHorizontal=true,fillVertical=true,border=0,backgroundColor=colors.black,textColor=colors.white})end;if k==nil then k=b.TabbedFrame(b.a.Anchor(1,1),{id="main",fillHorizontal=true,fillVertical=true,border=0,backgroundColor=colors.black,textColor=colors.white,primaryTabId=tostring(m.id)})return k.tabs[1]end;return k:createTab(m.id)end;local function o(m,p,q,n)a.expect(1,m,"table")a.expect(2,q,"table","nil")a.expect(3,p,"table","nil")a.expect(4,n,"boolean","nil")local r=q~=nil and p~=nil;if q~=nil then b.h.requireOutput(q)end;if n==nil then n=false end;local s=j[m.id]local t=false;if r then if s~=nil then if not s.names[p.name]or not b.h.isSameScreen(s.output,q)then j[m.id]=nil;s=nil end end;if s==nil then n=n and b.h.isTerm(q)if p.name==c.c.Event.Progress.quarry then s=f(m,p,q,l(m,n))s:createUI()j[m.id]=s elseif p.name==c.c.Event.Progress.tree then s=g(m,p,q,l(m,n))s:createUI()j[m.id]=s elseif p.name==c.c.Event.Colonies.status_poll then s=h(m,p.status.id,q,l(m,n))s.progress.status=p.status;s:createUI()j[m.id]=s end;t=s~=nil;if s~=nil and k~=nil then k:setActive(q,k.active)end end end;return s,t end;local function u(q)for v,s in pairs(j)do if b.h.isSameScreen(q,s.output)then return{id=v}end end;return nil end;local function w(m,x)a.expect(1,m,"table")a.expect(2,x,"string")local s=o(m)if s~=nil then s:updateStatus(x)end end;local function y(m,p,q,n)a.expect(1,m,"table")a.expect(2,p,"table")a.expect(3,q,"table","nil")a.expect(4,n,"boolean","nil")if q==nil then q=term else b.h.requireOutput(q)end;if n==nil then n=false end;local s,t=o(m,p,q,n)if s~=nil and not t then s:update(p)end end;local function z(p,A)for B,s in pairs(j)do s:handle(p,A)end end;local function C(m,p,A)local D=nil;if b.c.l.Events.Always[p]then z(p,A)return elseif b.c.l.Events.UI[p]then local E=d.split(A[1].objId,".")if E[1]=="main"and E[2]=="1"then D={id=tonumber(E[3])}end elseif b.c.l.Events.Terminal[p]then D=u(term)elseif b.c.l.Events.Monitor[p]then D=u(peripheral.wrap(A[1]))end;if D~=nil then m=D end;local s,B=o(m)if s~=nil then s:handle(p,A)end end;i.updateStatus=w;i.print=y;i.handle=C;i.itemStrings=e.itemStrings;return i
