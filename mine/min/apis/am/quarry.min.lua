local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.ui.base").BaseObject;local c=require("am.core")local d=require("am.log")local e=require("am.event")local f=require("am.helpers")local g=require("am.progress")local h=require("am.pathfind")local i=require("am.turtle")local j={}local k=b:extend("am.q.QuarryJob")j.QuarryJob=k;function k:init(l,m,n,o,p)a.expect(1,l,"number","nil")a.expect(2,m,"number","nil")a.expect(3,n,"number")a.expect(4,o,"boolean")a.expect(5,p,"boolean","nil")if l~=nil then a.range(l,1)end;if m~=nil then a.range(m,1)end;k.super.init(self)if l==nil or m==nil then p=true end;if p==nil then p=false end;self.left=l;self.forward=m;self.levels=n;self.walls=o;self.refuelTarget=320;self.refuelLevel=1;self.percentPerLevel=1;if not p then self:calculateExtra()end;return self end;local q=k:extend("am.q.ReadyQuarryJob")j.ReadyQuarryJob=q;function k:calculateExtra()local r=self.left*self.forward+self.left*2+self.forward*2;local s=r;local t=self.levels;if turtle.getFuelLimit()=="unlimited"then s=r*self.levels else t=1;while t<self.levels and s+r<turtle.getFuelLimit()do s=s+r;t=t+1 end end;self.fuelPerLevel=r;self.refuelTarget=s;self.refuelLevel=t;self.percentPerLevel=1/self.levels end;function k:deserialize(u)local v=k(u.left,u.forward,u.levels,u.walls,true)v.refuelTarget=u.refuelTarget;v.refuelLevel=u.refuelLevel;v.percentPerLevel=u.percentPerLevel;v.fuelPerLevel=u.fuelPerLevel;return v end;local w=b:extend("am.q.QuarryProgress")j.QuarryProgress=w;function w:init(x,y,z,A,B,C)a.expect(1,x,"number")a.expect(2,y,"number")a.expect(3,z,"number")a.expect(4,A,"number")a.expect(5,B,"boolean")a.expect(6,C,"string")a.range(x,0)a.range(y,0)a.range(z,0)a.range(A,0)k.super.init(self)self.current=x;self.levelCurrent=y;self.completedLevels=z;self.completedRows=A;self.finished=B;self.status=C;self.hitBedrock=false;self.items={}return self end;function w:deserialize(u)local D=w(u.current,u.levelCurrent,u.completedLevels,u.completedRows,u.finished,u.status)if u.hitBedrock~=nil then D.hitBedrock=u.hitBedrock end;if u.items~=nil then D.items=u.items end;return D end;local E={}E.job={name="quarry.job",default=k(16,16,1,true),type="table"}E.progress={name="quarry.progress",default=w(0,0,0,0,true,""),type="table"}E.autoResume={name="quarry.autoResume",default=true,type="boolean"}E.offsetPos={name="quarry.offsetPos",default=false}j.s=c.makeSettingWrapper(E)j.s.job.get=function()return k.deserialize(nil,settings.get(j.s.job.name))end;j.s.progress.get=function()return w.deserialize(nil,settings.get(j.s.progress.name))end;j.s.offsetPos.get=function()local u=settings.get(j.s.offsetPos.name)if u then u=h.TurtlePosition.deserialize(nil,settings.get(j.s.offsetPos.name))end;return u end;local F=h.TurtlePosition(vector.new(0,0,1),e.c.Turtle.Direction.Front)local G={Running=1,Completed=2,Paused=3,Halted=4}local H=G.Running;local I=true;local J=nil;local function K(L,D)a.expect(1,L,"table","nil")a.expect(2,D,"table","nil")if L~=nil then f.requirePosition(1,L)end;if L==nil then L=h.s.position.get()end;if D==nil then D=j.s.progress.get()end;e.QuarryProgressEvent(L,j.s.job.get(),D):send()end;local function M(D)a.expect(1,D,"table")if not b.has(D,"am.q.QuarryProgress")then error("Not progress obj")end;j.s.progress.set(D)K(nil,D)end;local function N(C)a.expect(1,C,"string")local D=j.s.progress.get()D.status=C;M(D)end;local function O(P)local D=j.s.progress.get()for Q,R in ipairs(P.items)do if D.items[R.name]==nil then D.items[R.name]=R else local S=D.items[R.name]S.count=S.count+R.count;D.items[R.name]=S end end;M(D)end;local function T(U)a.expect(1,U,"number")a.range(U,1)local D=j.s.progress.get()local v=j.s.job.get()D.completedRows=U-1;D.levelCurrent=D.completedRows/v.left;D.current=D.completedLevels/v.levels+v.percentPerLevel*D.levelCurrent;D.status=string.format("Digging Row %d",U)M(D)d.info(string.format("..Start row %d of %d (%d%%, %d%%)",U,v.left,D.levelCurrent*100,D.current*100))end;local function V()local D=j.s.progress.get()local v=j.s.job.get()D.completedRows=D.completedRows+1;D.levelCurrent=D.completedRows/v.left;D.current=D.completedLevels/v.levels+v.percentPerLevel*D.levelCurrent;D.status=string.format("Completed Row %d",D.completedRows)M(D)end;local function W()local D=j.s.progress.get()local v=j.s.job.get()D.levelCurrent=0;D.status=string.format("Starting Level %d",D.completedLevels+1)M(D)d.info(string.format(".Start level %d of %d (%d%%, %d%%)",D.completedLevels+1,v.levels,D.levelCurrent*100,D.current*100))end;local function X()local D=j.s.progress.get()local v=j.s.job.get()D.completedLevels=D.completedLevels+1;D.completedRows=0;D.levelCurrent=1;D.current=D.completedLevels/v.levels;D.status=string.format("Completing Level %d",D.completedLevels-1)M(D)end;local function Y()local D=j.s.progress.get()D.finished=true;D.status="Finishing Job"M(D)d.info("Finishing Quarry...")sleep(5)I=false;d.info("Items Mined:")local Z=g.itemStrings(D.items)for Q,R in ipairs(Z)do d.info(R)end end;local function _()local a0=j.s.offsetPos.get()if a0 then N("Going to Offset")while not h.goTo(a0.v.x,a0.v.z,a0.v.y,a0.dir)do i.error("Cannot Goto Offset")sleep(3)end;h.addNode()end end;local function a1(a2,o,a3,a4,a5)a.expect(1,a2,"number","nil")a.expect(2,o,"boolean","nil")a.expect(3,a3,"boolean","nil")a.expect(4,a4,"boolean","nil")a.expect(5,a5,"boolean","nil")if a2==nil then a2=1 end;if o==nil then o=true end;if a3==nil then a3=false end;if a4==nil then a4=false end;if a5==nil then a5=false end;for a6=1,a2,1 do local a7=turtle.detect()if not i.dig()then return false end;if not turtle.detectDown()and(a5 and o or i.isSourceBlockDown())then i.fillDown(true)end;if o then if a3 then h.turnLeft()i.fill(true)h.turnRight()end;if a4 then h.turnRight()i.fill(true)h.turnLeft()end end;if H~=G.Running then return true end end;return true end;local function a8()local a0=j.s.offsetPos.get()h.resetNodes()if a0 then h.addNode(a0)end;h.addNode(F)end;local function a9(U,a5)N(string.format("Returning to Row %d",U))d.info(string.format("..Resume start: %s",d.format(F)))local v=j.s.job.get()local aa=false;local ab=-1;local ac=1;if F.dir==e.c.Turtle.Direction.Right then aa=true;ab=1;ac=1 elseif F.dir==e.c.Turtle.Direction.Back then ab=1;ac=-1 elseif F.dir==e.c.Turtle.Direction.Left then aa=true;ab=-1;ac=-1 end;local ad=F.v.x;local ae=F.v.z;local af=U%2==0;if not af then local ag=ac*(v.forward-1)d.info(string.format("..Resume: forward %d",v.forward-1))if aa then ad=F.v.x+ag else ae=F.v.z+ag end;h.goTo(ad,ae)end;local ah=ab*(U-1)d.info(string.format("..Resume: left %d",U-1))if aa then h.goTo(ad,ae+ah,nil,F.dir)else h.goTo(ad+ah,ae,nil,F.dir)end;h.turnLeft()d.info(string.format("..Resume: dig",U-1))if not a1(1,v.walls,af,not af,a5)then return false end;if af then d.info("..Resume: turn right")h.turnRight()else d.info("..Resume: turn left")h.turnLeft()end;return true end;local function ai(aj,ak)local v=j.s.job.get()local o=not aj and v.walls;h.turnTo(F.dir)W()local L=h.s.position.get()if L.v.x==0 and L.v.z==0 and L.v.y==0 then _()if not a1(1,o,v.left==1,true)then return false end;if H~=G.Running then return true end;L=h.s.position.get()F=c.copy(L)end;local D=j.s.progress.get()local al=L.v.y-F.v.y;if D.completedLevels>0 then for a6=1,D.completedLevels+al,1 do if not i.digDown()then return false end end end;if o then h.turnRight()i.fill(true)if not aj then h.turnRight()i.fill(true)h.turnLeft()end;h.turnLeft()if ak then i.fillDown(true)end end;if D.completedRows>0 then if not a9(D.completedRows,ak)then return false end end;for am=D.completedRows+1,v.left,1 do a8()local an=am%2==0;local ao=am==v.left;local ap=v.forward*4+v.forward*3;if not i.hasRequiredFuel(ap)then i.refuel(v.fuelPerLevel,false)i.emptyInventory(true)end;T(am)local a3=ao and not an;local a4=am==1 or ao and an;if not a1(v.forward-1,o,a3,a4,ak)then return false end;if H~=G.Running then return true end;if o then i.fill(true)end;if am<v.left then if an then h.turnRight()else h.turnLeft()end;if not a1(1,o,an,not an)then return false end;if H~=G.Running then return true end;if am+1==v.left and o then i.fill(true)end;if an then h.turnRight()else h.turnLeft()end;if ak and o then i.fillDown(true)end end;V()if H~=G.Running then return true end end;D=j.s.progress.get()d.info(string.format("..Return to start (%d%%, %d%%)",v.percentPerLevel*100,D.current*100))while not h.goTo(F.v.x,F.v.z,nil,F.dir)do i.error("Cannot Return to Start")sleep(3)end;X()return true end;local function aq(ar,as,at,au)a.expect(1,ar,"number")a.expect(2,at,"number")a.expect(3,as,"number")a.expect(4,au,"number")a.range(au,1,4)j.s.offsetPos.set(h.TurtlePosition(vector.new(ar,at,as),au))end;local function av()E.offsetPos.set(false)end;local function aw()return j.s.autoResume.get()and not j.s.progress.get().finished end;local function ax(l,m,n,o)a.expect(1,l,"number","nil")a.expect(2,m,"number","nil")a.expect(3,n,"number")if l~=nil then a.range(l,1)end;if m~=nil then a.range(m,1)end;a.range(n,1)local v=k(l,m,n,o)j.s.job.set(v)local D=c.copy(j.s.progress.default)D.finished=false;M(D)end;local function ay()d.info("Discovering Boundary")N("Discovering Boundary")i.refuel(500)local az=j.s.offsetPos.get()_()N("Discovering Boundary")i.dig()h.turnRight()if not turtle.detect()then while h.forward()do end;h.turnLeft()while h.forward()do end;h.turnRight()i.dig()h.turnRight()h.turnRight()local L=h.s.position.get()j.setOffset(L.v.x,L.v.z,L.v.y,L.dir)d.info(string.format("Setting new offset: %s",d.format(L)))N(string.format("Set Offset: (%d, %d)",L.v.x,L.v.z))h.forward()h.turnRight()end;local m=1;local l=1;h.turnLeft()while h.forward()do m=m+1 end;h.turnLeft()while h.forward()do l=l+1;local L=h.s.position.get()if L.v.x==0 and L.v.z==1 then break end end;d.info(string.format("Discovered Boundary: %d %d",l,m))N(string.format("Discovered: %dx%d",l,m))h.resetNodes()if az then h.addNode(az)end;h.goToOrigin()h.resetNodes()return l,m end;local function aA()local v=j.s.job.get()if v.left==nil or v.forward==nil then local l,m=ay()ax(l,m,v.levels,v.walls)v=j.s.job.get()X()h.resetNodes()h.resetNodes(true)end;e.TurtleStartedEvent():send()local L=h.s.position.get()if L.v.x==0 and L.v.y==0 and L.v.z==0 and L.dir==e.c.Turtle.Direction.Front then i.discoverChests()end;i.emptyInventory()local D=j.s.progress.get()local aB=false;while D.completedLevels<v.levels and(H==G.Running or H==G.Paused)do if H==G.Running then if D.completedLevels%v.refuelLevel==0 or not i.hasRequiredFuel(v.fuelPerLevel)then i.refuel(v.refuelTarget,D.completedLevels~=0)end;if not ai(D.completedLevels==0,D.completedLevels+1==v.levels)then aB=true;break end;D=j.s.progress.get()if H==G.Paused then i.emptyInventory()e.TurtlePausedEvent():send()end else sleep(5)end end;if aB then D=j.s.progress.get()j.s.job.set(k(v.left,v.forward,D.completedLevels+1,v.walls))X()D=j.s.progress.get()D.hitBedrock=true;D.status="Hit Bedrock"M(D)end;i.emptyInventory()if H==G.Halted then e.TurtleExitEvent(false):send()sleep(3)H=G.Completed else e.TurtleExitEvent(true):send()end;Y()end;local function aC()while I do local aD=os.startTimer(3)local P,aE=c.cleanEventArgs(os.pullEvent())if P==e.c.Event.Pathfind.position then local L=h.TurtlePosition.deserialize(nil,aE[1].position)K(L)elseif P==e.c.Event.Pathfind.go_to then local aF=aE[1]if aF.gotoType==e.c.Turtle.GoTo.Return then if aF.success==nil then N("Resuming")else local D=j.s.progress.get()local v=j.s.job.get()if D.completedRows==v.left then N(string.format("Completed Row %d",D.completedRows))else N(string.format("Digging Row %d",D.completedRows+1))end end end elseif P==e.c.Event.Progress.quarry then g.print(e.getComputer(),aE[1])elseif P==e.c.Event.Turtle.empty then N("Emptying Inventory")if aE[1].completed then O(aE[1])end elseif P==e.c.Event.Turtle.exited then if aE[1].completed then N("success:Completed")H=G.Completed else N("error:Stopped")H=G.Halted end elseif P==e.c.Event.Turtle.request_pause then H=G.Paused;d.info("Pausing...")elseif P==e.c.Event.Turtle.request_halt then H=G.Halted;d.info("Halting...")elseif P==e.c.Event.Turtle.request_continue then H=G.Running;d.info("Unpausing...")e.TurtleStartedEvent():send()elseif P==e.c.Event.Turtle.paused then N("warning:Paused")elseif P==e.c.Event.Turtle.fetch_fill then N("Getting Fill Block")elseif P==e.c.Event.Turtle.refuel then N("Refueling")elseif P==e.c.Event.Turtle.error then local D=j.s.progress.get()J=D.status;N(string.format("error:%s",aE[1].error))elseif P==e.c.Event.Turtle.error_clear then if J~=nil then N(J)J=nil end end;g.handle(e.getComputer(),P,aE)os.cancelTimer(aD)end end;local function aG()e.initNetwork()if not e.online then return end;while I do local aH=e.receive()if aH~=nil then local aI=os.getComputerID()if aH.name==e.c.Event.Turtle.request_halt and aH.event.id==aI then H=G.Halted;d.info("Halting...")elseif aH.name==e.c.Event.Turtle.request_pause and aH.event.id==aI then H=G.Paused;d.info("Pausing...")elseif aH.name==e.c.Event.Turtle.request_continue and aH.event.id==aI then H=G.Running;d.info("Unpausing...")e.TurtleStartedEvent():send()end end end end;local function aJ(aK)a.expect(1,aK,"boolean","nil")if aK==nil then aK=false end;d.s.print.set(false)e.initNetwork()local v=j.s.job.get()term.clear()term.setCursorPos(1,1)if not d.s.print.get()then g.print(e.getComputer(),e.QuarryProgressEvent(h.s.position.get(),v,j.s.progress.get()))end;local aL=""if v.left~=nil and v.forward~=nil then aL=string.format(": %d x %d (%d)",v.left,v.forward,v.levels)end;if aK then d.info(string.format("Resume Quarry%s",aL))N("Resuming")else d.info(string.format("Quarry%s",aL))end;parallel.waitForAll(aA,aC,aG)term.setCursorBlink(true)if not d.s.print.get()then term.setBackgroundColor(colors.black)term.setTextColor(colors.white)term.clear()term.setCursorPos(1,1)end;d.s.print.set(true)end;j.setOffset=aq;j.clearOffset=av;j.canResume=aw;j.setJob=ax;j.runJob=aJ;return j
