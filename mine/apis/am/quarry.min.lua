local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.ui.base").BaseObject;local c=require("am.core")local d=require("am.log")local e=require("am.event")local f=require("am.helpers")local g=require("am.progress")local h=require("am.pathfind")local i=require("am.turtle")local j={}local k=b:extend("am.q.QuarryJob")j.QuarryJob=k;function k:init(l,m,n,o,p)a.expect(1,l,"number","nil")a.expect(2,m,"number","nil")a.expect(3,n,"number")a.expect(4,o,"boolean")a.expect(5,p,"boolean","nil")if l~=nil then a.range(l,1)end;if m~=nil then a.range(m,1)end;k.super.init(self)if l==nil or m==nil then p=true end;if p==nil then p=false end;self.left=l;self.forward=m;self.levels=n;self.walls=o;self.refuelTarget=320;self.refuelLevel=1;self.percentPerLevel=1;if not p then self:calculateExtra()end;return self end;local q=k:extend("am.q.ReadyQuarryJob")j.ReadyQuarryJob=q;function k:calculateExtra()local r=self.left*self.forward+self.left*2+self.forward*2;local s=r;local t=self.levels;if turtle.getFuelLimit()=="unlimited"then s=r*self.levels else t=1;while t<self.levels and s+r<turtle.getFuelLimit()do s=s+r;t=t+1 end end;self.refuelTarget=s;self.refuelLevel=t;self.percentPerLevel=1/self.levels end;function k:deserialize(u)local v=k(u.left,u.forward,u.levels,u.walls,true)v.refuelTarget=u.refuelTarget;v.refuelLevel=u.refuelLevel;v.percentPerLevel=u.percentPerLevel;return v end;local w=b:extend("am.q.QuarryProgress")j.QuarryProgress=w;function w:init(x,y,z,A,B,C)a.expect(1,x,"number")a.expect(2,y,"number")a.expect(3,z,"number")a.expect(4,A,"number")a.expect(5,B,"boolean")a.expect(6,C,"string")a.range(x,0)a.range(y,0)a.range(z,0)a.range(A,0)k.super.init(self)self.current=x;self.levelCurrent=y;self.completedLevels=z;self.completedRows=A;self.finished=B;self.status=C;self.hitBedrock=false;self.items={}return self end;function w:deserialize(u)local D=w(u.current,u.levelCurrent,u.completedLevels,u.completedRows,u.finished,u.status)if u.hitBedrock~=nil then D.hitBedrock=u.hitBedrock end;if u.items~=nil then D.items=u.items end;return D end;local E={}E.job={name="quarry.job",default=k(16,16,1,true),type="table"}E.progress={name="quarry.progress",default=w(0,0,0,0,true,""),type="table"}E.autoResume={name="quarry.autoResume",default=true,type="boolean"}E.offsetPos={name="quarry.offsetPos",default=false}j.s=c.makeSettingWrapper(E)j.s.job.get=function()return k.deserialize(nil,settings.get(j.s.job.name))end;j.s.progress.get=function()return w.deserialize(nil,settings.get(j.s.progress.name))end;j.s.offsetPos.get=function()local u=settings.get(j.s.offsetPos.name)if u then u=h.TurtlePosition.deserialize(nil,settings.get(j.s.offsetPos.name))end;return u end;local F=h.TurtlePosition(vector.new(0,0,1),e.c.Turtle.Direction.Front)local G={Running=1,Completed=2,Paused=3,Halted=4}local H=G.Running;local I=true;local function J(K,D)a.expect(1,K,"table","nil")a.expect(2,D,"table","nil")if K~=nil then f.requirePosition(1,K)end;if K==nil then K=h.s.position.get()end;if D==nil then D=j.s.progress.get()end;e.QuarryProgressEvent(K,j.s.job.get(),D):send()end;local function L(D)a.expect(1,D,"table")if not b.has(D,"am.q.QuarryProgress")then error("Not progress obj")end;j.s.progress.set(D)J(nil,D)end;local function M(C)a.expect(1,C,"string")local D=j.s.progress.get()D.status=C;L(D)end;local function N(O)local D=j.s.progress.get()for P,Q in ipairs(O.items)do if D.items[Q.name]==nil then D.items[Q.name]=Q else local R=D.items[Q.name]R.count=R.count+Q.count;D.items[Q.name]=R end end;L(D)end;local function S(T)a.expect(1,T,"number")a.range(T,1)local D=j.s.progress.get()local v=j.s.job.get()D.completedRows=T-1;D.levelCurrent=D.completedRows/v.left;D.current=D.completedLevels/v.levels+v.percentPerLevel*D.levelCurrent;D.status=string.format("Digging Row %d",T)L(D)d.info(string.format("..Start row %d of %d (%d%%, %d%%)",T,v.left,D.levelCurrent*100,D.current*100))end;local function U()local D=j.s.progress.get()local v=j.s.job.get()D.completedRows=D.completedRows+1;D.levelCurrent=D.completedRows/v.left;D.current=D.completedLevels/v.levels+v.percentPerLevel*D.levelCurrent;D.status=string.format("Completed Row %d",D.completedRows)L(D)end;local function V()local D=j.s.progress.get()local v=j.s.job.get()D.levelCurrent=0;D.status=string.format("Starting Level %d",D.completedLevels+1)L(D)d.info(string.format(".Start level %d of %d (%d%%, %d%%)",D.completedLevels+1,v.levels,D.levelCurrent*100,D.current*100))end;local function W()local D=j.s.progress.get()local v=j.s.job.get()D.completedLevels=D.completedLevels+1;D.completedRows=0;D.levelCurrent=1;D.current=D.completedLevels/v.levels;D.status=string.format("Completing Level %d",D.completedLevels-1)L(D)end;local function X()local D=j.s.progress.get()D.finished=true;D.status="Finishing Job"L(D)d.info("Finishing Quarry...")sleep(5)I=false;d.info("Items Mined:")local Y=g.itemStrings(D.items)for P,Q in ipairs(Y)do d.info(Q)end end;local function Z()local _=j.s.offsetPos.get()if _ then M("Going to Offset")while not h.goTo(_.v.x,_.v.z,_.v.y,_.dir)do i.error("Cannot Goto Offset")sleep(3)end;h.addNode()end end;local function a0(a1,o,a2,a3,a4)a.expect(1,a1,"number","nil")a.expect(2,o,"boolean","nil")a.expect(3,a2,"boolean","nil")a.expect(4,a3,"boolean","nil")a.expect(5,a4,"boolean","nil")if a1==nil then a1=1 end;if o==nil then o=true end;if a2==nil then a2=false end;if a3==nil then a3=false end;if a4==nil then a4=false end;for a5=1,a1,1 do local a6=turtle.detect()if not i.dig()then return false end;if not turtle.detectDown()and(a4 and o or i.isSourceBlockDown())then i.fillDown(true)end;if o then if a2 then h.turnLeft()i.fill(true)h.turnRight()end;if a3 then h.turnRight()i.fill(true)h.turnLeft()end end;if H~=G.Running then return true end end;return true end;local function a7()local _=j.s.offsetPos.get()h.resetNodes()if _ then h.addNode(_)end;h.addNode(F)end;local function a8(T,a4)M(string.format("Returning to Row %d",T))d.info(string.format("..Resume start: %s",d.format(F)))local v=j.s.job.get()local a9=false;local aa=-1;local ab=1;if F.dir==e.c.Turtle.Direction.Right then a9=true;aa=1;ab=1 elseif F.dir==e.c.Turtle.Direction.Back then aa=1;ab=-1 elseif F.dir==e.c.Turtle.Direction.Left then a9=true;aa=-1;ab=-1 end;local ac=F.v.x;local ad=F.v.z;local ae=T%2==0;if not ae then local af=ab*(v.forward-1)d.info(string.format("..Resume: forward %d",v.forward-1))if a9 then ac=F.v.x+af else ad=F.v.z+af end;h.goTo(ac,ad)end;local ag=aa*(T-1)d.info(string.format("..Resume: left %d",T-1))if a9 then h.goTo(ac,ad+ag,nil,F.dir)else h.goTo(ac+ag,ad,nil,F.dir)end;h.turnLeft()d.info(string.format("..Resume: dig",T-1))if not a0(1,v.walls,ae,not ae,a4)then return false end;if ae then d.info("..Resume: turn right")h.turnRight()else d.info("..Resume: turn left")h.turnLeft()end;return true end;local function ah(ai,aj)local v=j.s.job.get()local ak=1/v.levels;local o=not ai and v.walls;h.turnTo(F.dir)V()local K=h.s.position.get()if K.v.x==0 and K.v.z==0 and K.v.y==0 then Z()if not a0(1,o,v.left==1,true)then return false end;if H~=G.Running then return true end;K=h.s.position.get()F=c.copy(K)end;a7()local D=j.s.progress.get()local al=K.v.y-F.v.y;if D.completedLevels>0 then for a5=1,D.completedLevels+al,1 do if not i.digDown()then return false end end end;if o then h.turnRight()i.fill(true)if not ai then h.turnRight()i.fill(true)h.turnLeft()end;h.turnLeft()if aj then i.fillDown(true)end end;if D.completedRows>0 then if not a8(D.completedRows,aj)then return false end end;for am=D.completedRows+1,v.left,1 do local an=am%2==0;local ao=am==v.left;S(am)local a2=ao and not an;local a3=am==1 or ao and an;if not a0(v.forward-1,o,a2,a3,aj)then return false end;if H~=G.Running then return true end;if o then i.fill(true)end;if am<v.left then if an then h.turnRight()else h.turnLeft()end;if not a0(1,o,an,not an)then return false end;if H~=G.Running then return true end;if am+1==v.left and o then i.fill(true)end;if an then h.turnRight()else h.turnLeft()end;if aj and o then i.fillDown(true)end end;U()if H~=G.Running then return true end end;D=j.s.progress.get()d.info(string.format("..Return to start (%d%%, %d%%)",v.percentPerLevel*100,D.current*100))while not h.goTo(F.v.x,F.v.z,nil,F.dir)do i.error("Cannot Return to Start")sleep(3)end;W()return true end;local function ap(aq,ar,as,at)a.expect(1,aq,"number")a.expect(2,as,"number")a.expect(3,ar,"number")a.expect(4,at,"number")a.range(at,1,4)j.s.offsetPos.set(h.TurtlePosition(vector.new(aq,as,ar),at))end;local function au()E.offsetPos.set(false)end;local function av()return j.s.autoResume.get()and not j.s.progress.get().finished end;local function aw(l,m,n,o)a.expect(1,l,"number","nil")a.expect(2,m,"number","nil")a.expect(3,n,"number")if l~=nil then a.range(l,1)end;if m~=nil then a.range(m,1)end;a.range(n,1)local v=k(l,m,n,o)j.s.job.set(v)local D=c.copy(j.s.progress.default)D.finished=false;L(D)end;local function ax()d.info("Discovering Boundary")M("Discovering Boundary")i.refuel(500)local ay=j.s.offsetPos.get()Z()M("Discovering Boundary")i.dig()h.turnRight()if not turtle.detect()then while h.forward()do end;h.turnLeft()while h.forward()do end;h.turnRight()i.dig()h.turnRight()h.turnRight()local K=h.s.position.get()j.setOffset(K.v.x,K.v.z,K.v.y,K.dir)d.info(string.format("Setting new offset: %s",d.format(K)))M(string.format("Set Offset: (%d, %d)",K.v.x,K.v.z))h.forward()h.turnRight()end;local m=1;local l=1;h.turnLeft()while h.forward()do m=m+1 end;h.turnLeft()while h.forward()do l=l+1;local K=h.s.position.get()if K.v.x==0 and K.v.z==1 then break end end;d.info(string.format("Discovered Boundary: %d %d",l,m))M(string.format("Discovered: %dx%d",l,m))h.resetNodes()if ay then h.addNode(ay)end;h.goToOrigin()h.resetNodes()return l,m end;local function az()local v=j.s.job.get()if v.left==nil or v.forward==nil then local l,m=ax()aw(l,m,v.levels,v.walls)v=j.s.job.get()W()h.resetNodes()h.resetNodes(true)end;e.TurtleStartedEvent():send()i.emptyInventory()local D=j.s.progress.get()local aA=false;while D.completedLevels<v.levels and(H==G.Running or H==G.Paused)do if H==G.Running then if D.completedLevels%v.refuelLevel==0 then i.refuel(v.refuelTarget,D.completedLevels~=0)end;if not ah(D.completedLevels==0,D.completedLevels+1==v.levels)then aA=true;break end;D=j.s.progress.get()if H==G.Paused then i.emptyInventory()e.TurtlePausedEvent():send()end else sleep(5)end end;if aA then D=j.s.progress.get()j.s.job.set(k(v.left,v.forward,D.completedLevels+1,v.walls))W()D=j.s.progress.get()D.hitBedrock=true;D.status="Hit Bedrock"L(D)end;i.emptyInventory()if H==G.Halted then e.TurtleExitEvent(false):send()sleep(3)H=G.Completed else e.TurtleExitEvent(true):send()end;X()end;local function aB()while I do local aC=os.startTimer(3)local O,aD=c.cleanEventArgs(os.pullEvent())if O==e.c.Event.Pathfind.position then local K=h.TurtlePosition.deserialize(nil,aD[1].position)J(K)elseif O==e.c.Event.Pathfind.go_to then local aE=aD[1]if aE.gotoType==e.c.Turtle.GoTo.Return then if aE.success==nil then M("Resuming")else local D=j.s.progress.get()local v=j.s.job.get()if D.completedRows==v.left then M(string.format("Completed Row %d",D.completedRows))else M(string.format("Digging Row %d",D.completedRows+1))end end end elseif O==e.c.Event.Progress then g.print(e.getComputer(),aD[1])elseif O==e.c.Event.Turtle.empty then M("Emptying Inventory")if aD[1].completed then N(aD[1])end elseif O==e.c.Event.Turtle.exited then if aD[1].completed then M("success:Completed")H=G.Completed else M("error:Stopped")H=G.Halted end elseif O==e.c.Event.Turtle.request_pause then H=G.Paused;d.info("Pausing...")elseif O==e.c.Event.Turtle.request_halt then H=G.Halted;d.info("Halting...")elseif O==e.c.Event.Turtle.request_continue then H=G.Running;d.info("Unpausing...")e.TurtleStartedEvent():send()elseif O==e.c.Event.Turtle.paused then M("warning:Paused")elseif O==e.c.Event.Turtle.fetch_fill then M("Getting Fill Block")elseif O==e.c.Event.Turtle.refuel then M("Refueling")elseif O==e.c.Event.Turtle.error then M(string.format("error:%s",aD[1].error))end;g.handle(e.getComputer(),O,aD)os.cancelTimer(aC)end end;local function aF()e.initNetwork()if not e.online then return end;while I do local aG=e.receive()if aG~=nil then local aH=os.getComputerID()if aG.name==e.c.Event.Turtle.request_halt and aG.event.id==aH then H=G.Halted;d.info("Halting...")elseif aG.name==e.c.Event.Turtle.request_pause and aG.event.id==aH then H=G.Paused;d.info("Pausing...")elseif aG.name==e.c.Event.Turtle.request_continue and aG.event.id==aH then H=G.Running;d.info("Unpausing...")e.TurtleStartedEvent():send()end end end end;local function aI(aJ)a.expect(1,aJ,"boolean","nil")if aJ==nil then aJ=false end;e.initNetwork()local v=j.s.job.get()term.clear()term.setCursorPos(1,1)if not d.s.print.get()then g.print(e.getComputer(),e.QuarryProgressEvent(h.s.position.get(),v,j.s.progress.get()))end;local aK=""if v.left~=nil and v.forward~=nil then aK=string.format(": %d x %d (%d)",v.left,v.forward,v.levels)end;if aJ then d.info(string.format("Resume Quarry%s",aK))M("Resuming")else d.info(string.format("Quarry%s",aK))end;parallel.waitForAll(az,aB,aF)term.setCursorBlink(true)if not d.s.print.get()then term.setBackgroundColor(colors.black)term.setTextColor(colors.white)term.clear()term.setCursorPos(1,1)end;d.s.print.set(true)end;j.setOffset=ap;j.clearOffset=au;j.canResume=av;j.setJob=aw;j.runJob=aI;return j
