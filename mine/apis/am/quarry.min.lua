local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.ui.base").BaseObject;local c=require("am.core")local d=require("am.log")local e=require("am.event")local f=require("am.helpers")local g=require("am.progress")local h=require("am.pathfind")local i=require("am.turtle")local j={}local k=b:extend("am.q.QuarryJob")j.QuarryJob=k;function k:init(l,m,n,o,p)a.expect(1,l,"number","nil")a.expect(2,m,"number","nil")a.expect(3,n,"number")a.expect(4,o,"boolean")a.expect(5,p,"boolean","nil")if l~=nil then a.range(l,1)end;if m~=nil then a.range(m,1)end;k.super.init(self)if l==nil or m==nil then p=true end;if p==nil then p=false end;self.left=l;self.forward=m;self.levels=n;self.walls=o;self.refuelTarget=320;self.refuelLevel=1;self.percentPerLevel=1;if not p then self:calculateExtra()end;return self end;local q=k:extend("am.q.ReadyQuarryJob")j.ReadyQuarryJob=q;function k:calculateExtra()local r=self.left*self.forward+self.left*2+self.forward*2;local s=r;local t=self.levels;if turtle.getFuelLimit()=="unlimited"then s=r*self.levels else t=1;while t<self.levels and s+r<turtle.getFuelLimit()do s=s+r;t=t+1 end end;self.refuelTarget=s;self.refuelLevel=t;self.percentPerLevel=1/self.levels end;function k:deserialize(u)local v=k(u.left,u.forward,u.levels,u.walls,true)v.refuelTarget=u.refuelTarget;v.refuelLevel=u.refuelLevel;v.percentPerLevel=u.percentPerLevel;return v end;local w=b:extend("am.q.QuarryProgress")j.QuarryProgress=w;function w:init(x,y,z,A,B,C)a.expect(1,x,"number")a.expect(2,y,"number")a.expect(3,z,"number")a.expect(4,A,"number")a.expect(5,B,"boolean")a.expect(6,C,"string")a.range(x,0)a.range(y,0)a.range(z,0)a.range(A,0)k.super.init(self)self.current=x;self.levelCurrent=y;self.completedLevels=z;self.completedRows=A;self.finished=B;self.status=C;self.hitBedrock=false;self.items={}return self end;function w:deserialize(u)local D=w(u.current,u.levelCurrent,u.completedLevels,u.completedRows,u.finished,u.status)D.hitBedrock=u.hitBedrock;D.items=u.items end;local E={}E.job={name="quarry.job",default=k(16,16,1,true),type="table"}E.progress={name="quarry.progress",default=w(0,0,0,0,true,""),type="table"}E.autoResume={name="quarry.autoResume",default=true,type="boolean"}E.offsetPos={name="quarry.offsetPos",default=false}j.s=c.makeSettingWrapper(E)j.s.job.get=function()return k.deserialize(nil,settings.get(j.s.job.name))end;j.s.progress.get=function()return w.deserialize(nil,settings.get(j.s.progress.name))end;j.s.offsetPos.get=function()local u=settings.get(j.s.offsetPos.name)if u then u=h.TurtlePosition.deserialize(nil,settings.get(j.s.offsetPos.name))end;return u end;local F=h.TurtlePosition(vector.new(0,0,1),e.c.Turtle.Direction.Front)local G={Running=1,Completed=2,Paused=3,Halted=4}local H=G.Running;local function I(J,D)a.expect(1,J,"table","nil")a.expect(2,D,"table","nil")if J~=nil then f.requirePosition(1,J)end;if J==nil then J=h.s.position.get()end;if D==nil then D=j.s.progress.get()end;e.QuarryProgressEvent(J,j.s.job.get(),D):send()end;local function K(D)a.expect(1,D,"table")if not b.has(D,"am.q.QuarryProgress")then error("Not progress obj")end;j.s.progress.set(D)I(nil,D)end;local function L(C)a.expect(1,C,"string")local D=j.s.progress.get()D.status=C;K(D)end;local function M(N)local D=j.s.progress.get()for O,P in ipairs(N.items)do if D.items[P.name]==nil then D.items[P.name]=P else local Q=D.items[P.name]Q.count=Q.count+P.count;D.items[P.name]=Q end end end;local function R(S)a.expect(1,S,"number")a.range(S,1)local D=j.s.progress.get()local v=j.s.job.get()D.completedRows=S-1;D.levelCurrent=D.completedRows/v.left;D.current=D.completedLevels/v.levels+v.percentPerLevel*D.levelCurrent;D.status=string.format("Digging Row %d",S)K(D)d.info(string.format("..Start row %d of %d (%d%%, %d%%)",S,v.left,D.levelCurrent*100,D.current*100))end;local function T()local D=j.s.progress.get()local v=j.s.job.get()D.completedRows=D.completedRows+1;D.levelCurrent=D.completedRows/v.left;D.current=D.completedLevels/v.levels+v.percentPerLevel*D.levelCurrent;D.status=string.format("Completed Row %d",D.completedRows)K(D)end;local function U()local D=j.s.progress.get()local v=j.s.job.get()D.levelCurrent=0;D.status=string.format("Starting Level %d",D.completedLevels+1)K(D)d.info(string.format(".Start level %d of %d (%d%%, %d%%)",D.completedLevels+1,v.levels,D.levelCurrent*100,D.current*100))end;local function V()local D=j.s.progress.get()local v=j.s.job.get()D.completedLevels=D.completedLevels+1;D.completedRows=0;D.levelCurrent=1;D.current=D.completedLevels/v.levels;D.status=string.format("Completing Level %d",D.completedLevels-1)K(D)end;local function W()local D=j.s.progress.get()D.finished=true;D.status="Finishing Job"K(D)d.debug("Finishing Quarry...")d.debug("Items Mined:")local X=g.itemStrings(D.items)for O,P in ipairs(X)do d.debug(P)end end;local function Y()local Z=j.s.offsetPos.get()if Z then L("Going to Offset")while not h.goTo(Z.v.x,Z.v.z,Z.v.y,Z.dir)do i.error("Cannot Goto Offset")sleep(3)end;h.addNode()end end;local function _(a0,o,a1,a2,a3)a.expect(1,a0,"number","nil")a.expect(2,o,"boolean","nil")a.expect(3,a1,"boolean","nil")a.expect(4,a2,"boolean","nil")a.expect(5,a3,"boolean","nil")if a0==nil then a0=1 end;if o==nil then o=true end;if a1==nil then a1=false end;if a2==nil then a2=false end;if a3==nil then a3=false end;for a4=1,a0,1 do local a5=turtle.detect()if not i.dig()then return false end;if not turtle.detectDown()and(a3 and o or i.isSourceBlockDown())then i.fillDown(true)end;if o then if a1 then h.turnLeft()i.fill(true)h.turnRight()end;if a2 then h.turnRight()i.fill(true)h.turnLeft()end end;if H~=G.Running then return true end end;return true end;local function a6()local Z=j.s.offsetPos.get()h.resetNodes()if Z then h.addNode(Z)end;h.addNode(F)end;local function a7(S,a3)L(string.format("Returning to Row %d",S))d.info(string.format("..Resume start: %s",d.format(F)))local v=j.s.job.get()local a8=false;local a9=-1;local aa=1;if F.dir==e.c.Turtle.Direction.Right then a8=true;a9=1;aa=1 elseif F.dir==e.c.Turtle.Direction.Back then a9=1;aa=-1 elseif F.dir==e.c.Turtle.Direction.Left then a8=true;a9=-1;aa=-1 end;local ab=F.v.x;local ac=F.v.z;local ad=S%2==0;if not ad then local ae=aa*(v.forward-1)d.info(string.format("..Resume: forward %d",v.forward-1))if a8 then ab=F.v.x+ae else ac=F.v.z+ae end;h.goTo(ab,ac)end;local af=a9*(S-1)d.info(string.format("..Resume: left %d",S-1))if a8 then h.goTo(ab,ac+af,nil,F.dir)else h.goTo(ab+af,ac,nil,F.dir)end;h.turnLeft()d.info(string.format("..Resume: dig",S-1))if not _(1,v.walls,ad,not ad,a3)then return false end;if ad then d.info("..Resume: turn right")h.turnRight()else d.info("..Resume: turn left")h.turnLeft()end;return true end;local function ag(ah,ai)local v=j.s.job.get()local aj=1/v.levels;local o=not ah and v.walls;h.turnTo(F.dir)U()local J=h.s.position.get()if J.v.x==0 and J.v.z==0 and J.v.y==0 then Y()if not _(1,o,v.left==1,true)then return false end;if H~=G.Running then return true end;J=h.s.position.get()F=c.copy(J)end;a6()local D=j.s.progress.get()local ak=J.v.y-F.v.y;if D.completedLevels>0 then for a4=1,D.completedLevels+ak,1 do if not i.digDown()then return false end end end;if o then h.turnRight()i.fill(true)if not ah then h.turnRight()i.fill(true)h.turnLeft()end;h.turnLeft()if ai then i.fillDown(true)end end;if D.completedRows>0 then if not a7(D.completedRows,ai)then return false end end;for al=D.completedRows+1,v.left,1 do local am=al%2==0;local an=al==v.left;R(al)local a1=an and not am;local a2=al==1 or an and am;if not _(v.forward-1,o,a1,a2,ai)then return false end;if H~=G.Running then return true end;if o then i.fill(true)end;if al<v.left then if am then h.turnRight()else h.turnLeft()end;if not _(1,o,am,not am)then return false end;if H~=G.Running then return true end;if al+1==v.left and o then i.fill(true)end;if am then h.turnRight()else h.turnLeft()end;if ai and o then i.fillDown(true)end end;T()if H~=G.Running then return true end end;D=j.s.progress.get()d.info(string.format("..Return to start (%d%%, %d%%)",v.percentPerLevel*100,D.current*100))while not h.goTo(F.v.x,F.v.z,nil,F.dir)do i.error("Cannot Return to Start")sleep(3)end;V()return true end;local function ao(ap,aq,ar,as)a.expect(1,ap,"number")a.expect(2,ar,"number")a.expect(3,aq,"number")a.expect(4,as,"number")a.range(as,1,4)j.s.offsetPos.set(h.TurtlePosition(vector.new(ap,ar,aq),as))end;local function at()E.offsetPos.set(false)end;local function au()return j.s.autoResume.get()and not j.s.progress.get().finished end;local function av(l,m,n,o)a.expect(1,l,"number","nil")a.expect(2,m,"number","nil")a.expect(3,n,"number")if l~=nil then a.range(l,1)end;if m~=nil then a.range(m,1)end;a.range(n,1)local v=k(l,m,n,o)j.s.job.set(v)local D=c.copy(j.s.progress.default)D.finished=false;K(D)end;local function aw()d.info("Discovering Boundary")L("Discovering Boundary")i.refuel(500)local ax=j.s.offsetPos.get()Y()L("Discovering Boundary")i.dig()h.turnRight()if not turtle.detect()then while h.forward()do end;h.turnLeft()while h.forward()do end;h.turnRight()i.dig()h.turnRight()h.turnRight()local J=h.s.position.get()j.setOffset(J.v.x,J.v.z,J.v.y,J.dir)d.info(string.format("Setting new offset: %s",d.format(J)))L(string.format("Set Offset: (%d, %d)",J.v.x,J.v.z))h.forward()h.turnRight()end;local m=1;local l=1;h.turnLeft()while h.forward()do m=m+1 end;h.turnLeft()while h.forward()do l=l+1;local J=h.s.position.get()if J.v.x==0 and J.v.z==1 then break end end;d.info(string.format("Discovered Boundary: %d %d",l,m))L(string.format("Discovered: %dx%d",l,m))h.resetNodes()if ax then h.addNode(ax)end;h.goToOrigin()h.resetNodes()return l,m end;local function ay()local v=j.s.job.get()if v.left==nil or v.forward==nil then local l,m=aw()av(l,m,v.levels,v.walls)v=j.s.job.get()V()end;e.TurtleStartedEvent():send()i.emptyInventory()local D=j.s.progress.get()local az=false;while D.completedLevels<v.levels and(H==G.Running or H==G.Paused)do if H==G.Running then if D.completedLevels%v.refuelLevel==0 then i.refuel(v.refuelTarget,D.completedLevels~=0)end;if not ag(D.completedLevels==0,D.completedLevels+1==v.levels)then az=true;break end;D=j.s.progress.get()if H==G.Paused then i.emptyInventory()e.TurtlePausedEvent():send()end else sleep(5)end end;if az then D=j.s.progress.get()j.s.job.set(k(v.left,v.forward,D.completedLevels+1,v.walls))V()D=j.s.progress.get()D.hitBedrock=true;D.status="Hit Bedrock"K(D)end;W()i.emptyInventory()if H==G.Halted then e.TurtleExitEvent(false):send()sleep(3)H=G.Completed else e.TurtleExitEvent(true):send()end end;local function aA()while H~=G.Completed do local aB=os.startTimer(3)local N,aC=c.cleanEventArgs(os.pullEvent())if N==e.c.Event.Pathfind.position then local J=h.TurtlePosition.deserialize(nil,aC[1].position)I(J)elseif N==e.c.Event.Pathfind.go_to then local aD=aC[1]if aD.gotoType==e.c.Turtle.GoTo.Return then if aD.success==nil then L("Resuming")else local D=j.s.progress.get()local v=j.s.job.get()if D.completedRows==v.left then L(string.format("Completed Row %d",D.completedRows))else L(string.format("Digging Row %d",D.completedRows+1))end end end elseif N==e.c.Event.Progress then g.print(e.getComputer(),aC[1])elseif N==e.c.Event.Turtle.empty then L("Emptying Inventory")elseif N==e.c.Event.Turtle.exited then if aC[1].completed then L("success:Completed")H=G.Completed else L("error:Stopped")H=G.Halted end elseif N==e.c.Event.Turtle.request_pause then H=G.Paused;d.info("Pausing...")elseif N==e.c.Event.Turtle.request_halt then H=G.Halted;d.info("Halting...")elseif N==e.c.Event.Turtle.request_continue then H=G.Running;d.info("Unpausing...")e.TurtleStartedEvent():send()elseif N==e.c.Event.Turtle.paused then L("warning:Paused")elseif N==e.c.Event.Turtle.fetch_fill then L("Getting Fill Block")elseif N==e.c.Event.Turtle.refuel then L("Refueling")elseif N==e.c.Event.Turtle.error then L(string.format("error:%s",aC[1].error))elseif N==e.c.Event.Turtle.empty then M(aC[1])end;g.handle(e.getComputer(),N,aC)os.cancelTimer(aB)end end;local function aE()e.initNetwork()if not e.online then return end;while H~=G.Completed do local aF=e.receive()if aF~=nil then id=os.getComputerID()if aF.name==e.c.Event.Turtle.request_halt and aF.event.id==id then H=G.Halted;d.info("Halting...")elseif aF.name==e.c.Event.Turtle.request_pause and aF.event.id==id then H=G.Paused;d.info("Pausing...")elseif aF.name==e.c.Event.Turtle.request_continue and aF.event.id==id then H=G.Halted;d.info("Unpausing...")e.TurtleStartedEvent():send()end end end end;local function aG(aH)a.expect(1,aH,"boolean","nil")if aH==nil then aH=false end;e.initNetwork()local v=j.s.job.get()term.clear()term.setCursorPos(1,1)if not d.s.print.get()then g.print(e.getComputer(),e.QuarryProgressEvent(h.s.position.get(),v,j.s.progress.get()))end;local aI=""if v.left~=nil and v.forward~=nil then aI=string.format(": %d x %d (%d)",v.left,v.forward,v.levels)end;if aH then d.info(string.format("Resume Quarry%s",aI))L("Resuming")else d.info(string.format("Quarry%s",aI))end;parallel.waitForAll(ay,aA,aE)term.setCursorBlink(true)if not d.s.print.get()then term.clear()term.setCursorPos(1,1)end;d.s.print.set(true)end;j.setOffset=ao;j.clearOffset=at;j.canResume=au;j.setJob=av;j.runJob=aG;return j
